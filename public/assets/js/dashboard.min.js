Dashboard = {
    init: function() {
        this.global();
    },
    global: function() {
        $('.drawer').drawer();

        $("input[name=npi]").inputmask({ mask: '9999999999' });
        $('[name=phone]').inputmask({ mask: '(999) 999-9999' });
        $("[name=start_date]").inputmask({ mask: '99/99/9999' });
        $("[name=end_date]").inputmask({ mask: '99/99/9999' });

        $("#start-date").datetimepicker({ language: 'en_US', pickTime: false });
        $("#valid-upto").datetimepicker({ language: 'en_US', pickTime: false });
        $("#end-date").datetimepicker({ language: 'en_US', pickTime: false });
        $("#change-date").datetimepicker({ language: 'en_US', pickTime: false });
        $("#payment-start-date").datetimepicker({ language: 'en_US', pickTime: false });

        $(".btn-generate").on('click', function(event) {
            event.preventDefault();
            $('.generate-drawer').drawer('toggle');
        });

        $(".add-note").on('click', function(event) {
            event.preventDefault();
            var note_number = parseInt($('#note_count').val())+1;
            var note = '<div class="form-group invoive-note">  <label class="col-xs-2 control-label">Invoice Note '+note_number+'</label><div class="info-cls"> <div class="info-icon">&nbsp;&nbsp;&nbsp;&nbsp;</div>'
                    +'<div class="col-xs-6"><textarea class="form-control" id="note'+note_number+'" maxlength="50" rows="2" cols="54" style="resize:none" name="note'+note_number+'" spellcheck="false"></textarea></div>'
                    +'<div class="col-xs-2"><button class="btn btn-primary btn-submit remove-note" type="button" style="margin-right:65px"> - </button></div></div></div>';
            $('#notes').append(note);
            $('#note_count').val(note_number);
            $(".remove-note").on('click', function(event) {
                event.preventDefault();
                $(this).parent().parent().remove();
                var finalIndex = 0;
                $('.invoive-note .form-control').each(function(index, obj) {
                    //console.log(obj);
                    var presentId = obj.id;
                    $('#'+presentId).removeAttr('name');
                    $('#'+presentId).attr('name','note'+(index+1));
                    //$('#'+presentId).removeAttr('id');
                    $('#'+presentId).attr('id','note'+(index+1));
                    finalIndex = index+1;
                });
                $('.invoive-note .control-label').each(function(index, obj) {
                    //console.log(obj);
                    obj.innerText = 'Invoice Note '+(index +1);
                });
                $('#note_count').val(finalIndex);
            });
        });

        $(".remove-note").on('click', function(event) {
            event.preventDefault();
            $(this).parent().parent().remove();
            var finalIndex = 0;
            $('.invoive-note .form-control').each(function(index, obj) {
                //console.log(obj);
                var presentId = obj.id;
                $('#'+presentId).removeAttr('name');
                $('#'+presentId).attr('name','note'+(index+1));
                //$('#'+presentId).removeAttr('id');
                $('#'+presentId).attr('id','note'+(index+1));
                finalIndex = index+1;
            });
            $('.invoive-note .control-label').each(function(index, obj) {
                //console.log(obj);
                obj.innerText = 'Invoice Note '+(index +1);
            });
            $('#note_count').val(finalIndex);
        });

        function getNextAvailableId (array) {
            const sortedArray = array.sort()
            let previousId = 1;
            for (let element of sortedArray) {
                if (element != (previousId))
                    return previousId;
                previousId = element+1;
            }
            return previousId;
        }

        function removeClientDomainFunction(event){
            event.preventDefault();
            $(this).parent().parent().remove();
        }

        $(".add-client-domain").on('click', function(event) {
            event.preventDefault();
            let IDsInUse = $.each($("[data-domain-id]").map(function(){
                    return $(this).data('domain-id');
                }).get(), (index, item)=>{});
            let domain_number = getNextAvailableId(IDsInUse)
            let domain =  `
            <div class="form-group client-domain">  
                <label class="col-xs-2 control-label" data-domain-id="${domain_number}" >Domain</label>
                <div class="col-xs-5"><textarea class="form-control" id="domain${domain_number}" maxlength="50" rows="2" cols="54" style="resize:none" name="domains[${domain_number}]" spellcheck="false"></textarea>
            </div>
            <div class="col-xs-2"><button id="button-${domain_number}" class="btn btn-primary btn-submit remove-client-domain" type="button"> - </button></div></div>
            `
            $('#domains').append(domain);
            $(".remove-client-domain").on('click', removeClientDomainFunction);
        });

        $(".remove-client-domain").on('click', removeClientDomainFunction);


        $(".add-wrvu-rate").on('click', function(event) {
            event.preventDefault();
            var wrvu_rate_number = parseInt($('#contract_psa_wrvu_rates_count').val())+1;
            var wrvu_rate = '<div><div class="form-group wrvu-range">  <label class="col-xs-2 control-label">wRVU Range '+wrvu_rate_number+'</label>'
                            +'<div class="col-xs-5">'
                            +'<input class="form-control" id="contract_psa_wrvu_ranges'+wrvu_rate_number+'" name="contract_psa_wrvu_ranges'+wrvu_rate_number+'"></input>'
                            +'<span class="help-block">Note: Enter the upper bound for the range. For example, 500 means wRVUs from 1-500 would pay at the rate below. Enter 9999999 for the last range.</span>'
                            +'</div>'
                            +'</div>'
                            +'<div class="form-group wrvu-rate">  <label class="col-xs-2 control-label">Rate '+wrvu_rate_number+'</label>'
                            +'<div class="col-xs-5"><input class="form-control" id="contract_psa_wrvu_rates'+wrvu_rate_number+'" name="contract_psa_wrvu_rates'+wrvu_rate_number+'"></input></div>'
                            +'<div class="col-xs-2"><button class="btn btn-primary btn-submit remove-wrvu-rate" type="button"> - </button></div></div><hr></div>';
            $('#contract_psa_wrvu_rates').append(wrvu_rate);
            $('#contract_psa_wrvu_rates_count').val(wrvu_rate_number);
            $(".remove-wrvu-rate").on('click', function(event) {
                event.preventDefault();
                $(this).parent().parent().parent().remove();
                var finalIndex = 0;
                $('.wrvu-rate .form-control').each(function(index, obj) {
                    //console.log(obj);
                    var presentId = obj.id;
                    $('#'+presentId).removeAttr('name');
                    $('#'+presentId).attr('name','contract_psa_wrvu_rates'+(index+1));
                    //$('#'+presentId).removeAttr('id');
                    $('#'+presentId).attr('id','contract_psa_wrvu_rates'+(index+1));
                    //finalIndex = index+1;
                });
                $('.wrvu-rate .control-label').each(function(index, obj) {
                    //console.log(obj);
                    obj.innerText = 'Rate '+(index +1);
                });
                $('.wrvu-range .form-control').each(function(index, obj) {
                    //console.log(obj);
                    var presentId = obj.id;
                    $('#'+presentId).removeAttr('name');
                    $('#'+presentId).attr('name','contract_psa_wrvu_ranges'+(index+1));
                    //$('#'+presentId).removeAttr('id');
                    $('#'+presentId).attr('id','contract_psa_wrvu_ranges'+(index+1));
                    finalIndex = index+1;
                });
                $('.wrvu-range .control-label').each(function(index, obj) {
                    //console.log(obj);
                    obj.innerText = 'wRVU Range '+(index +1);
                });
                $('#contract_psa_wrvu_rates_count').val(finalIndex);
            });
        });

        $(".remove-wrvu-rate").on('click', function(event) {
            event.preventDefault();
            $(this).parent().parent().parent().remove();
            var finalIndex = 0;
            $('.wrvu-rate .form-control').each(function(index, obj) {
                //console.log(obj);
                var presentId = obj.id;
                $('#'+presentId).removeAttr('name');
                $('#'+presentId).attr('name','contract_psa_wrvu_rates'+(index+1));
                //$('#'+presentId).removeAttr('id');
                $('#'+presentId).attr('id','contract_psa_wrvu_rates'+(index+1));
                //finalIndex = index+1;
            });
            $('.wrvu-rate .control-label').each(function(index, obj) {
                //console.log(obj);
                obj.innerText = 'Rate '+(index +1);
            });
            $('.wrvu-range .form-control').each(function(index, obj) {
                //console.log(obj);
                var presentId = obj.id;
                $('#'+presentId).removeAttr('name');
                $('#'+presentId).attr('name','contract_psa_wrvu_ranges'+(index+1));
                //$('#'+presentId).removeAttr('id');
                $('#'+presentId).attr('id','contract_psa_wrvu_ranges'+(index+1));
                finalIndex = index+1;
            });
            $('.wrvu-range .control-label').each(function(index, obj) {
                //console.log(obj);
                obj.innerText = 'wRVU Range '+(index +1);
            });
            $('#contract_psa_wrvu_rates_count').val(finalIndex);
        });
    },
    confirm: function(options) {
        var dialog = $(options.dialog);

        $(document).on('click', options.button, function(event) {
            var target = $(this).attr('href');

            $(options.dialog).data('target', target);
            $(options.dialog).modal('show');

            event.preventDefault();
        });

        $(document).on('click', options.dialogButton, function(event) {
            location.assign(dialog.data('target'));
        });
    },
    pagination: function(options) {
        var self = this;

        if (options.filters) {
            $(document).on('click', options.filters, function(event) {
                var href = $(this).attr('href');

                self.ajaxUpdate(options, href);
                event.preventDefault();
            });
        }

        if (options.sort) {
            $(document).on('click', options.sort, function(event) {
                var href = $(this).attr('href');

                self.ajaxUpdate(options, href);
                event.preventDefault();
            });
        }

        if (options.pagination) {
            $(document).on('click', options.pagination, function(event) {
                var href = $(this).attr('href');

                self.ajaxUpdate(options, href);
                event.preventDefault();
            });
        }
    },
    selectAll: function(options)
    {
        $(document).on("click", options.toggle, function(event)
        {
            $(options.values).prop("selected", this.checked);

            $(options.label).html(this.checked ?
                "Deselect All (Control/Command + Click to select or deselect items)" :
                "Select All (Control/Command + Click to select or deselect items)");
        });
    },
    ajaxUpdate: function(options, href) {
        $(options.container).block('show');

        $.ajax({
            dataType: 'json',
            url:      href
        }).done(function(response) {
            $(options.container).html(response.table);
            $(options.links).html(response.pagination);
            $(options.index).html(response.index);
        }).always(function(response) {
            $(options.container).block('hide');
        });
    },
    downloadUrl: function(url) {
        var frame = $('<iframe src="' + url + '"></iframe>').css({
            'display': 'none'
        });

        frame.appendTo('body');
    },
    updateReportsForm: function()
    {
        $(".overlay").show();
        // Determine AJAX update query.
        var query = "?hospital=" + $("[name=hospital]").val();
        query = query + "&contract_type_change=1&contract_type=" + $("[name=contract_type]").val();
        query = query + "&facility=" + $("[name=facility]").val();
        query = query + "&start_date=" + $("[name=start_date]").val();
        query = query + "&end_date=" + $("[name=end_date]").val();
        query = query + "&select_all=" + $("[name=select_all]").prop('checked');

        // Determine which agreements are selected and append the value to the
        // AJAX update query.
        var agreements = [];
        var start_date = [];
        var end_date = [];
        $(".agreement:checked").each(function(index) {
            var value = $(this).val();

            query = query + "&agreements[]=" + value;
            query = query + "&month_number["+value+"]=" + $("[name=agreement_"+value+"_start_month] option:selected").val();
            /*query = query + "&end_date["+value+"]=" + $("[name=end_"+value+"_start_month] option:selected").text();;*/
            agreements.push(value);
        });

        if ($('.show_all_contracts').prop('checked') == true) {
            query = query + "&show_archived=1";
        } else {
            query = query + "&show_archived=0";
        }

        //added for soft deleted physician
        if ($('.show_deleted_physicians').prop('checked') == true) {
            query = query + "&show_deleted_physicians=1";
        } else {
            query = query + "&show_deleted_physicians=0";
        }

        // Determine which physicians are currently selected.
        var physicians = [];
        $("#physicians option:selected").each(function(index) {
            physicians.push($(this).val());
        });

        $.ajax({
            url:      query,
            dataType: "json"
        }).done(function(response) {
            // Replace the generation form.
            $(".form-generate-report").replaceWith(response.form);

            // Check all previously checked agreements.
            $.each(agreements, function(index, value) {
                $(".agreement[value=" + value + "]").prop("checked", true);
            });

            // Select all previously selected physicians.
            $.each(physicians, function(index, value) {
                $("#physicians option[value=" + value + "]").prop("selected", true);
            });

            $(".overlay").hide();
        });
    },
    updateReportsFormWithData: function()
    {
        $(".overlay").show();
        // Determine AJAX update query.
        console.log("inside update");
        var query = "?contract_type_change=0&contract_type=" + $("[name=contract_type]").val();
        query = query + "&facility=" + $("[name=facility]").val();
        // Determine which agreements are selected and append the value to the
        // AJAX update query.
        var agreements = [];
        var start_date = [];
        var end_date = [];
        $(".agreement:checked").each(function(index) {
            var value = $(this).val();

            query = query + "&agreements[]=" + value;
        if(($("[name=start_"+value+"_start_month] option:selected").text())!=""){
             query = query + "&start_date["+value+"]=" + $("[name=start_"+value+"_start_month] option:selected").text();
             query = query + "&end_date["+value+"]=" + $("[name=end_"+value+"_start_month] option:selected").text();;
        }
        else
        {
             query = query + "&start_date=" + $("[name=start_date]").val();
             query = query + "&end_date=" + $("[name=end_date]").val();
            }
            agreements.push(value);
        });

        if ($('.show_all_contracts').prop('checked') == true) {
            query = query + "&show_archived=1";
        } else {
            query = query + "&show_archived=0";
        }

        //added for soft deleted physician
        if ($('.show_deleted_physicians').prop('checked') == true) {
            query = query + "&show_deleted_physicians=1";
        } else {
            query = query + "&show_deleted_physicians=0";
        }


        // Determine which physicians are currently selected.
        var physicians = [];
        $("#physicians option:selected").each(function(index) {
            physicians.push($(this).val());
        });

        $.ajax({
            url:      query,
            dataType: "json"
        }).done(function(response) {
            // Replace the generation form.
            $(".form-generate-report").replaceWith(response.form);

            // Check all previously checked agreements.
            $.each(agreements, function(index, value) {
                $(".agreement[value=" + value + "]").prop("checked", true);
            });

            // Select all previously selected physicians.
            $.each(physicians, function(index, value) {
                $("#physicians option[value=" + value + "]").prop("selected", true);
            });

            $(".overlay").hide();
        });
    },
    updatePaymentForm: function()
    {
        // Determine AJAX update query.
        var query = "?agreement=" + $("[name=agreement]").val();

        $.ajax({
            url:      query,
            dataType: "json"
        }).done(function(response) {
            // Replace the generation form.
            $(".form-payment").replaceWith(response.form);
        });
    },
    updatePaymentFormMonth: function()
    {
        // Determine AJAX update query.
        var query = "?agreement=" + $("[name=agreement]").val()+"&month="+ $("[name=month]").val();

        $.ajax({
            url:      query,
            dataType: "json"
        }).done(function(response) {
            // Replace the generation form.
            $(".form-payment").replaceWith(response.form);
        });
    },
    updatePerformancePhysicianReportsForm: function()
    {
        $(".overlay").show();
        // Determine AJAX update query.
        var query = "?hospital=" + $("[name=hospital]").val() + "&contract_type=" + $("[name=contract_type]").val();
        // query = query + "&contract_type_change=1&contract_type=" + $("[name=contract_type]").val();

        // Determine which agreements are selected and append the value to the
        // AJAX update query.
        var physicians = [];
        $(".physician:checked").each(function(index) {
            var value = $(this).val();

            query = query + "&physicians[]=" + value;
            /*query = query + "&end_date["+value+"]=" + $("[name=end_"+value+"_start_month] option:selected").text();;*/
            physicians.push(value);
        });

        $.ajax({
            url:      query,
            dataType: "json"
        }).done(function(response) {
            // Replace the generation form.
            $(".form-generate-report").replaceWith(response.form);

            // Check all previously checked physicians.
            $.each(physicians, function(index, value) {
                $(".physician[value=" + value + "]").prop("checked", true);
            });

            $(".overlay").hide();
        });
    },
    updatePerformanceApproverReportsForm: function()
    {
        $(".overlay").show();
        // Determine AJAX update query.
        var query = "?hospital=" + $("[name=hospital]").val() + "&contract_type=" + $("[name=contract_type]").val();;
        // query = query + "&contract_type_change=1&contract_type=" + $("[name=contract_type]").val();

        // Determine which agreements are selected and append the value to the
        // AJAX update query.
        var approvers = [];
        $(".approvers:checked").each(function(index) {
            var value = $(this).val();

            query = query + "&approvers[]=" + value;
            /*query = query + "&end_date["+value+"]=" + $("[name=end_"+value+"_start_month] option:selected").text();;*/
            approvers.push(value);
        });

        $.ajax({
            url:      query,
            dataType: "json"
        }).done(function(response) {
            // Replace the generation form.
            $(".form-generate-report").replaceWith(response.form);

            // Check all previously checked approvers.
            $.each(approvers, function(index, value) {
                $(".approvers[value=" + value + "]").prop("checked", true);
            });

            $(".overlay").hide();
        });
    },
    updateAttestationForm: function()
    {
        $(".overlay").show();
        // Determine AJAX update query.
        var query = "?state=" + $("[name=state]").val() + "&attestation=" + $("[name=attestation]").val() + "&attestation_type=" + $("[name=attestation_type]").val();

        $.ajax({
            url: query,
            dataType: "json"
        }).done(function(response) {
            $('#state-list').html('');
            $('#state-list').html(response.table);
            $(".overlay").hide();
        });
    },
    updateAttestationReportsFormWithData: function()
    {
        $(".overlay").show();
        // Determine AJAX update query.
        var query = "?attestation_type=" + $("[name=attestation_type]").val();

        // Determine which agreements are selected and append the value to the
        // AJAX update query.
        var agreements = [];
        var start_date = [];
        var end_date = [];
        $(".agreement:checked").each(function(index) {
            var value = $(this).val();

            query = query + "&agreements[]=" + value;
            query = query + "&start_date["+value+"]=" + $("[name=start_"+value+"_start_month] option:selected").text();
            query = query + "&end_date["+value+"]=" + $("[name=end_"+value+"_start_month] option:selected").text();;
            agreements.push(value);
        });

        // Determine which physicians are currently selected.
        var physicians = [];
        $("#physicians option:selected").each(function(index) {
            physicians.push($(this).val());
        });

        $.ajax({
            url:      query,
            dataType: "json"
        }).done(function(response) {
            // Replace the generation form.
            $(".form-generate-report").replaceWith(response.form);

            // Check all previously checked agreements.
            $.each(agreements, function(index, value) {
                $(".agreement[value=" + value + "]").prop("checked", true);
            });

            // Select all previously selected physicians.
            $.each(physicians, function(index, value) {
                $("#physicians option[value=" + value + "]").prop("selected", true);
            });
            $(".overlay").hide();
        });
    },

    updateQuestionType: function()
    {
        $(".overlay").show();
        // Determine AJAX update query.
        var query = "?attestation=" + $("[name=attestation]").val();

        $.ajax({
            url: query,
            dataType: "json"
        }).done(function(response) {
            $("#question_types, #question_type").empty();
            $.each(response.question_types, function(index, value) {
                $("#question_types, #question_type").append($("<option></option>").val(index).html(value));
            });
            $(".overlay").hide();
        });
    }
};
//function validated Emails domain
function validateEmailField(email_domains){
    var emailValue=$('input[name=email]').val();
    var splitArray = emailValue.split('@');
    if(email_domains.indexOf(splitArray[1]) != -1 )
    {
        document.getElementById('error-message').innerHTML="This email is not allowed!";
        return false;
    }
    else
    {
       return true;
    }
}

$(function() { Dashboard.init() });

function copyToClipboard() {
    // Get the text field
    const copyText = document.getElementsByTagName('p')[0].textContent;
    console.log(copyText);

    // Copy the text inside the text field
    navigator.clipboard.writeText(copyText);
    document.getElementById("clipboard")
    .innerHTML = 'Copied';
    $('#clipboard').modal('show');
    setTimeout(function() {
        $('#clipboard').modal('hide');
    }, 1000);


}
