/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
DROP TABLE IF EXISTS `access_tokens`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `access_tokens` (
  `id` int NOT NULL AUTO_INCREMENT,
  `physician_id` int NOT NULL,
  `key` varchar(40) NOT NULL,
  `expiration` date NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `action_categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `action_categories` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `action_contract`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `action_contract` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int unsigned NOT NULL,
  `action_id` int unsigned NOT NULL,
  `hours` float(5,2) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `contract_id` (`contract_id`,`action_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `action_hospitals`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `action_hospitals` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `action_id` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `action_physician`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `action_physician` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int unsigned NOT NULL,
  `action_id` int unsigned NOT NULL,
  `created_at` date NOT NULL,
  `updated_at` date NOT NULL,
  PRIMARY KEY (`id`),
  KEY `physician_id` (`physician_id`,`action_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `action_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `action_types` (
  `id` tinyint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `actions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `actions` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `action_type_id` tinyint unsigned NOT NULL,
  `contract_type_id` tinyint unsigned DEFAULT NULL,
  `payment_type_id` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `category_id` int NOT NULL,
  `hospital_id` int NOT NULL,
  `sort_order` int NOT NULL,
  PRIMARY KEY (`id`),
  KEY `actiontype_id` (`action_type_id`),
  KEY `contracttype_id` (`contract_type_id`),
  KEY `actions_payment_type_id_index` (`payment_type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `admin_reports`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `admin_reports` (
  `id` int NOT NULL AUTO_INCREMENT,
  `filename` varchar(255) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `agreement_approval_managers_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `agreement_approval_managers_info` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `agreement_id` int NOT NULL,
  `contract_id` int NOT NULL,
  `level` int NOT NULL,
  `type_id` int NOT NULL,
  `user_id` int NOT NULL,
  `initial_review_day` int NOT NULL,
  `final_review_day` int NOT NULL,
  `opt_in_email_status` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `is_deleted` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int DEFAULT NULL,
  `updated_by` int DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `agreement_approval_managers_info_contract_id_agreement_id_level` (`contract_id`,`agreement_id`,`level`),
  KEY `agreement_approval_managers_info_user_id_index` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `agreement_internal_notes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `agreement_internal_notes` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `agreement_id` int NOT NULL,
  `note` mediumtext CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `agreement_internal_notes_agreement_id_index` (`agreement_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `agreements`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `agreements` (
  `id` int NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `start_date` date NOT NULL,
  `name` varchar(50) NOT NULL,
  `end_date` date NOT NULL,
  `archived` tinyint(1) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `valid_upto` date NOT NULL,
  `is_deleted` tinyint NOT NULL,
  `contract_manager` int NOT NULL,
  `financial_manager` int NOT NULL,
  `send_invoice_day` int NOT NULL,
  `pass1_day` int NOT NULL,
  `pass2_day` int NOT NULL,
  `invoice_receipient` text NOT NULL,
  `approval_process` enum('0','1') NOT NULL,
  `invoice_reminder_recipient_1` int NOT NULL,
  `invoice_reminder_recipient_2` int NOT NULL,
  `invoice_reminder_recipient_1_opt_in_email` enum('0','1') NOT NULL DEFAULT '1',
  `invoice_reminder_recipient_2_opt_in_email` enum('0','1') NOT NULL DEFAULT '1',
  `deleted_at` timestamp NULL DEFAULT NULL,
  `payment_frequency_type` tinyint NOT NULL DEFAULT '1',
  `payment_frequency_start_date` date NOT NULL,
  PRIMARY KEY (`id`),
  KEY `agreements_hospital_id_index` (`hospital_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `amount_paid`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `amount_paid` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int NOT NULL,
  `amountPaid` decimal(10,2) DEFAULT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `contract_id` int NOT NULL,
  `practice_id` int NOT NULL,
  `is_interfaced` tinyint(1) NOT NULL DEFAULT '0',
  `final_payment` tinyint(1) NOT NULL DEFAULT '0',
  `invoice_no` varchar(30) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `remarks` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `amount_paid_contract_id_index` (`contract_id`),
  KEY `amount_paid_start_date_index` (`start_date`),
  KEY `amount_paid_end_date_index` (`end_date`),
  KEY `amount_paid_is_interfaced_index` (`is_interfaced`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `amount_paid_test`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `amount_paid_test` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int NOT NULL,
  `amountPaid` float DEFAULT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `created_at` date NOT NULL,
  `updated_at` date NOT NULL,
  `contract_id` int NOT NULL,
  `practice_id` int NOT NULL,
  `is_interfaced` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `amount_paid_contract_id_index` (`contract_id`),
  KEY `amount_paid_start_date_index` (`start_date`),
  KEY `amount_paid_end_date_index` (`end_date`),
  KEY `amount_paid_is_interfaced_index` (`is_interfaced`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `amount_paid_with_percentage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `amount_paid_with_percentage` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `amount_paid_id` int NOT NULL,
  `amount` decimal(10,2) NOT NULL DEFAULT '0.00',
  `index` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `approval_managers_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `approval_managers_type` (
  `approval_manager_type_id` int unsigned NOT NULL AUTO_INCREMENT,
  `manager_type` varchar(250) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `is_active` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '1',
  PRIMARY KEY (`approval_manager_type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `attestation_question_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `attestation_question_types` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `type` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `description` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `attestation_questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `attestation_questions` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `state_id` int NOT NULL,
  `attestation_type` int NOT NULL,
  `attestation_id` int NOT NULL,
  `question` varchar(3000) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `question_type` int NOT NULL DEFAULT '1',
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `sort_order` int NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `attestation_questions_answer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `attestation_questions_answer` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `attestation_questions_answer_header_id` int NOT NULL,
  `question_id` int NOT NULL,
  `question_answer` varchar(3000) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `attestation_questions_answer_header`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `attestation_questions_answer_header` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int NOT NULL,
  `contract_id` int NOT NULL,
  `submitted_for_date` datetime NOT NULL,
  `attestation_type` int NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `attestation_report`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `attestation_report` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `filename` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `attestation_type` tinyint NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `attestation_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `attestation_types` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `description` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `attestations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `attestations` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `description` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `audits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `audits` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `user_type` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `user_id` bigint unsigned DEFAULT NULL,
  `event` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `auditable_type` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `auditable_id` bigint unsigned NOT NULL,
  `old_values` text CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci,
  `new_values` text CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci,
  `url` text CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci,
  `ip_address` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `user_agent` varchar(1023) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `tags` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `audits_auditable_type_auditable_id_index` (`auditable_type`,`auditable_id`),
  KEY `audits_user_id_user_type_index` (`user_id`,`user_type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `column_preferences_approval_dashboard`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `column_preferences_approval_dashboard` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `date` tinyint(1) NOT NULL DEFAULT '1',
  `hospital` tinyint(1) NOT NULL DEFAULT '1',
  `agreement` tinyint(1) NOT NULL DEFAULT '1',
  `contract` tinyint(1) NOT NULL DEFAULT '1',
  `practice` tinyint(1) NOT NULL DEFAULT '1',
  `physician` tinyint(1) NOT NULL DEFAULT '1',
  `log` tinyint(1) NOT NULL DEFAULT '1',
  `details` tinyint(1) NOT NULL DEFAULT '1',
  `duration` tinyint(1) NOT NULL DEFAULT '1',
  `physician_approval` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_1` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_2` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_3` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_4` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_5` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_6` tinyint(1) NOT NULL DEFAULT '1',
  `calculated_payment` tinyint(1) NOT NULL DEFAULT '1',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `column_preferences_approval_dashboard_user_id_index` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `column_preferences_payment_status`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `column_preferences_payment_status` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `date` tinyint(1) NOT NULL DEFAULT '1',
  `hospital` tinyint(1) NOT NULL DEFAULT '1',
  `agreement` tinyint(1) NOT NULL DEFAULT '1',
  `contract` tinyint(1) NOT NULL DEFAULT '1',
  `practice` tinyint(1) NOT NULL DEFAULT '1',
  `physician` tinyint(1) NOT NULL DEFAULT '1',
  `log` tinyint(1) NOT NULL DEFAULT '1',
  `details` tinyint(1) NOT NULL DEFAULT '1',
  `duration` tinyint(1) NOT NULL DEFAULT '1',
  `physician_approval` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_1` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_2` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_3` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_4` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_5` tinyint(1) NOT NULL DEFAULT '1',
  `lvl_6` tinyint(1) NOT NULL DEFAULT '1',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `column_preferences_payment_status_user_id_index` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `compliance_report`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `compliance_report` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `created_by_user_id` int NOT NULL,
  `filename` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `report_type` tinyint NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contract invoice note is 1`;
/*!50001 DROP VIEW IF EXISTS `contract invoice note is 1`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `contract invoice note is 1` AS SELECT 
 1 AS `id`,
 1 AS `note_type`,
 1 AS `note_for`,
 1 AS `note_index`,
 1 AS `note`,
 1 AS `is_active`,
 1 AS `created_at`,
 1 AS `updated_at`,
 1 AS `hospital_id`*/;
SET character_set_client = @saved_cs_client;
DROP TABLE IF EXISTS `contract invoice note is 2`;
/*!50001 DROP VIEW IF EXISTS `contract invoice note is 2`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `contract invoice note is 2` AS SELECT 
 1 AS `id`,
 1 AS `note_type`,
 1 AS `note_for`,
 1 AS `note_index`,
 1 AS `note`,
 1 AS `is_active`,
 1 AS `created_at`,
 1 AS `updated_at`,
 1 AS `hospital_id`*/;
SET character_set_client = @saved_cs_client;
DROP TABLE IF EXISTS `contract invoice note is 3`;
/*!50001 DROP VIEW IF EXISTS `contract invoice note is 3`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `contract invoice note is 3` AS SELECT 
 1 AS `id`,
 1 AS `note_type`,
 1 AS `note_for`,
 1 AS `note_index`,
 1 AS `note`,
 1 AS `is_active`,
 1 AS `created_at`,
 1 AS `updated_at`,
 1 AS `hospital_id`*/;
SET character_set_client = @saved_cs_client;
DROP TABLE IF EXISTS `contract invoice note is 4`;
/*!50001 DROP VIEW IF EXISTS `contract invoice note is 4`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `contract invoice note is 4` AS SELECT 
 1 AS `id`,
 1 AS `note_type`,
 1 AS `note_for`,
 1 AS `note_index`,
 1 AS `note`,
 1 AS `is_active`,
 1 AS `created_at`,
 1 AS `updated_at`,
 1 AS `hospital_id`*/;
SET character_set_client = @saved_cs_client;
DROP TABLE IF EXISTS `contract_deadline_days`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contract_deadline_days` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `contract_deadline_days` int NOT NULL,
  `is_active` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int DEFAULT NULL,
  `updated_by` int DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `contract_deadline_days_contract_id_index` (`contract_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contract_documents`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contract_documents` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `filename` varchar(250) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `is_active` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int DEFAULT NULL,
  `updated_by` int DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contract_interface_lawson_apcdistrib`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contract_interface_lawson_apcdistrib` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `cvd_company` int NOT NULL,
  `cvd_vendor` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `cvd_dist_company` int NOT NULL,
  `cvd_dis_acct_unit` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `cvd_dis_account` int NOT NULL,
  `cvd_dis_sub_acct` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `invoice_number_suffix` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contract_internal_notes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contract_internal_notes` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `note` mediumtext CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `contract_internal_notes_contract_id_index` (`contract_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contract_names`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contract_names` (
  `id` smallint unsigned NOT NULL AUTO_INCREMENT,
  `contract_type_id` tinyint unsigned NOT NULL,
  `payment_type_id` int NOT NULL,
  `name` varchar(35) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `contracttype_id` (`contract_type_id`),
  KEY `contract_names_payment_type_id_index` (`payment_type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contract_periods`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contract_periods` (
  `id` int NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `start` date NOT NULL,
  `end` date NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contract_psa_metrics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contract_psa_metrics` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `annual_comp` decimal(9,2) NOT NULL,
  `annual_comp_fifty` decimal(9,2) NOT NULL,
  `wrvu_fifty` int NOT NULL,
  `annual_comp_seventy_five` decimal(9,2) NOT NULL,
  `wrvu_seventy_five` int NOT NULL,
  `annual_comp_ninety` decimal(9,2) NOT NULL,
  `wrvu_ninety` int NOT NULL,
  `start_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `end_date` datetime NOT NULL DEFAULT '2037-12-31 00:00:00',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contract_psa_wrvu_rates`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contract_psa_wrvu_rates` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `upper_bound` int NOT NULL,
  `rate` decimal(9,2) NOT NULL,
  `rate_index` int NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contract_rate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contract_rate` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `rate` float(10,2) DEFAULT NULL,
  `effective_start_date` date NOT NULL,
  `effective_end_date` date NOT NULL,
  `contract_id` int NOT NULL,
  `rate_type` int NOT NULL,
  `status` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `rate_index` int NOT NULL DEFAULT '0',
  `range_start_day` int NOT NULL DEFAULT '0',
  `range_end_day` int NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `get_rate` (`effective_start_date`,`contract_id`,`rate_type`,`status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contract_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contract_types` (
  `id` tinyint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(70) NOT NULL,
  `description` text NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `contracts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contracts` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `agreement_id` int NOT NULL,
  `physician_id` int unsigned NOT NULL,
  `contract_type_id` tinyint unsigned NOT NULL,
  `payment_type_id` int NOT NULL,
  `contract_name_id` smallint unsigned DEFAULT NULL,
  `min_hours` float unsigned NOT NULL,
  `max_hours` float unsigned NOT NULL,
  `expected_hours` float unsigned NOT NULL,
  `rate` float(10,2) NOT NULL,
  `description` text NOT NULL,
  `archived` tinyint NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `weekday_rate` float(10,2) DEFAULT NULL,
  `weekend_rate` float(10,2) DEFAULT NULL,
  `holiday_rate` float(10,2) DEFAULT NULL,
  `end_date` datetime NOT NULL,
  `mandate_details` tinyint NOT NULL,
  `default_to_agreement` enum('0','1') NOT NULL DEFAULT '1',
  `annual_cap` float(8,2) NOT NULL,
  `contract_CM` int NOT NULL,
  `contract_FM` int NOT NULL,
  `on_call_rate` float(10,2) DEFAULT NULL,
  `called_back_rate` float(10,2) DEFAULT NULL,
  `called_in_rate` float(10,2) DEFAULT NULL,
  `burden_of_call` enum('0','1') NOT NULL DEFAULT '0',
  `physician_opt_in_email` enum('0','1') NOT NULL DEFAULT '1',
  `deadline_option` enum('0','1') NOT NULL DEFAULT '0',
  `custom_action_enabled` tinyint(1) NOT NULL DEFAULT '1',
  `default_to_agreement_dates` tinyint(1) NOT NULL DEFAULT '1',
  `manual_contract_end_date` date NOT NULL,
  `manual_contract_valid_upto` date NOT NULL,
  `manually_archived` tinyint(1) NOT NULL DEFAULT '0',
  `enter_by_day` tinyint(1) NOT NULL DEFAULT '0',
  `wrvu_payments` tinyint(1) NOT NULL DEFAULT '0',
  `is_lawson_interfaced` tinyint(1) NOT NULL DEFAULT '0',
  `deleted_at` timestamp NULL DEFAULT NULL,
  `prior_worked_hours` float(8,2) NOT NULL,
  `prior_amount_paid` float(8,2) NOT NULL,
  `prior_start_date` date NOT NULL,
  `practice_id` int NOT NULL,
  `on_call_process` int NOT NULL,
  `holiday_on_off` tinyint(1) NOT NULL DEFAULT '0',
  `partial_hours` int NOT NULL DEFAULT '0',
  `partial_hours_calculation` int NOT NULL DEFAULT '0',
  `annual_max_payment` double(10,2) DEFAULT NULL,
  `allow_max_hours` enum('0','1') NOT NULL DEFAULT '0',
  `quarterly_max_hours` tinyint(1) NOT NULL DEFAULT '0',
  `state_attestations_monthly` tinyint(1) NOT NULL DEFAULT '0',
  `state_attestations_annually` tinyint(1) NOT NULL DEFAULT '0',
  `receipient1` varchar(100) NOT NULL DEFAULT '',
  `receipient2` varchar(100) NOT NULL DEFAULT '',
  `receipient3` varchar(100) NOT NULL DEFAULT '',
  `supervision_type` int NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `contracttype_id` (`contract_type_id`),
  KEY `contractname_id` (`contract_name_id`),
  KEY `physician_id` (`physician_id`),
  KEY `contracts_payment_type_id_index` (`payment_type_id`),
  KEY `contracts_is_lawson_interfaced_index` (`is_lawson_interfaced`),
  KEY `contracts_agreement_id_index` (`agreement_id`),
  KEY `contracts_practice_id_index` (`practice_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `cron_schedule`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `cron_schedule` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `type` int NOT NULL,
  `dayOrdate` int NOT NULL,
  `hour` int NOT NULL,
  `min` int NOT NULL,
  `url` varchar(250) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `custom_category_actions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `custom_category_actions` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `category_id` int NOT NULL,
  `category_name` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `action_id` int DEFAULT NULL,
  `action_name` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `failed_jobs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `failed_jobs` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `connection` text CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `queue` text CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `payload` text CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `exception` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `faqs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `faqs` (
  `id` smallint unsigned NOT NULL AUTO_INCREMENT,
  `question` varchar(255) NOT NULL,
  `answer` text NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `finalized`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `finalized` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `groups` (
  `id` tinyint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(25) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `health_system`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `health_system` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `health_system_name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `health_system_region_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `health_system_region_users` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `health_system_region_id` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `health_system_region_users_user_id_index` (`user_id`),
  KEY `health_system_region_users_health_system_region_id_index` (`health_system_region_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `health_system_regions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `health_system_regions` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `region_name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `health_system_id` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `health_system_regions_health_system_id_index` (`health_system_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `health_system_reports`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `health_system_reports` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `health_system_id` int NOT NULL,
  `health_system_region_id` int NOT NULL,
  `created_by_user_id` int NOT NULL,
  `filename` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `report_type` tinyint NOT NULL,
  `is_region_level` tinyint(1) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `health_system_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `health_system_users` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `health_system_id` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `health_system_users_user_id_index` (`user_id`),
  KEY `health_system_users_health_system_id_index` (`health_system_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospital_feature_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospital_feature_details` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `performance_on_off` int NOT NULL DEFAULT '0',
  `compliance_on_off` int NOT NULL DEFAULT '0',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospital_interface_imagenow`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospital_interface_imagenow` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `protocol` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `host` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `port` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `username` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `email` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `api_username` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `api_password` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospital_interface_lawson`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospital_interface_lawson` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `protocol` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `host` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `port` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `username` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `apcinvoice_filename` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `apcdistrib_filename` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `api_username` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `api_password` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospital_invoices`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospital_invoices` (
  `id` int NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `contracttype_id` int NOT NULL,
  `filename` varchar(255) NOT NULL,
  `period` varchar(60) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `last_invoice_no` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospital_logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospital_logs` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `agreement_id` int NOT NULL,
  `practice_id` int NOT NULL,
  `physician_id` int NOT NULL,
  `contract_id` int NOT NULL,
  `logs` int NOT NULL,
  `rejected_logs` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospital_reports`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospital_reports` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int unsigned NOT NULL,
  `filename` varchar(255) NOT NULL,
  `type` tinyint NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `id` (`id`,`hospital_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospital_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospital_user` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int unsigned NOT NULL,
  `user_id` int unsigned NOT NULL,
  `primary` tinyint NOT NULL,
  `is_invoice_dashboard_display` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`),
  KEY `hospital` (`hospital_id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospitals`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospitals` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `npi` char(10) NOT NULL,
  `name` varchar(50) NOT NULL,
  `city` varchar(35) NOT NULL,
  `state_id` tinyint unsigned NOT NULL,
  `address` varchar(100) NOT NULL,
  `description` varchar(255) NOT NULL,
  `expiration` date NOT NULL,
  `archived` tinyint(1) NOT NULL,
  `password_expiration_months` int unsigned NOT NULL DEFAULT '99',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `invoice_type` tinyint NOT NULL DEFAULT '0',
  `assertation_text` text NOT NULL,
  `benchmark_rejection_percentage` double(6,2) NOT NULL DEFAULT '0.00',
  `invoice_dashboard_on_off` int NOT NULL DEFAULT '1',
  `approve_all_invoices` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `npi` (`npi`),
  KEY `state` (`state_id`),
  KEY `hospitals_password_expiration_months_index` (`password_expiration_months`),
  FULLTEXT KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospitals_contract_spend_paid`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospitals_contract_spend_paid` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `contract_type_id` int NOT NULL,
  `contract_spend` decimal(10,2) NOT NULL DEFAULT '0.00',
  `contract_paid` decimal(10,2) NOT NULL DEFAULT '0.00',
  `pending_payment_count` int NOT NULL DEFAULT '0',
  `active_contract_count` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospitals_override_mandate_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospitals_override_mandate_details` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `action_id` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `hospitals_time_stamp_entry`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hospitals_time_stamp_entry` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `action_id` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `interface_tank_lawson`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `interface_tank_lawson` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `amount_paid_id` int NOT NULL,
  `hospital_interface_lawson_id` int NOT NULL,
  `physician_interface_lawson_apcinvoice_id` int NOT NULL,
  `contract_interface_lawson_apcdistrib_id` int NOT NULL,
  `is_sent` tinyint(1) NOT NULL DEFAULT '0',
  `date_sent` datetime NOT NULL,
  `apcinvoice_filename` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `apcdistrib_filename` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `interface_tank_lawson_hospital_id_index` (`hospital_id`),
  KEY `interface_tank_lawson_is_sent_index` (`is_sent`),
  KEY `interface_tank_lawson_date_sent_index` (`date_sent`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `interface_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `interface_types` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `interface_types_name_index` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `invoice_notes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `invoice_notes` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `note_type` tinyint NOT NULL,
  `note_for` int NOT NULL,
  `note_index` int NOT NULL,
  `note` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `hospital_id` int NOT NULL,
  `practice_id` int NOT NULL,
  PRIMARY KEY (`id`),
  KEY `invoice_notes_note_type_note_for_hospital_id_is_active_index` (`note_type`,`note_for`,`hospital_id`,`is_active`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `invoice_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `invoice_types` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `type_id` int NOT NULL,
  `name` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `deleted_at` datetime DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `jobs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `jobs` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `queue` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `payload` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `attempts` tinyint unsigned NOT NULL,
  `reserved_at` int unsigned DEFAULT NULL,
  `available_at` int unsigned NOT NULL,
  `created_at` int unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `jobs_queue_index` (`queue`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `laravel_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `laravel_migrations` (
  `bundle` varchar(50) NOT NULL,
  `name` varchar(200) NOT NULL,
  `batch` int NOT NULL,
  PRIMARY KEY (`bundle`,`name`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `log_approval`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `log_approval` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `log_id` int NOT NULL,
  `user_id` int NOT NULL,
  `role` int NOT NULL,
  `approval_managers_level` int NOT NULL,
  `approval_date` date NOT NULL,
  `signature_id` int NOT NULL,
  `reason_for_reject` int NOT NULL,
  `approval_status` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `signatureTimeZone` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  KEY `log_approval_log_id_index` (`log_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `log_approval_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `log_approval_history` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `log_id` int NOT NULL,
  `user_id` int NOT NULL,
  `role` int NOT NULL,
  `approval_managers_level` int NOT NULL,
  `approval_date` date NOT NULL,
  `signature_id` int NOT NULL,
  `reason_for_reject` int NOT NULL,
  `approval_status` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `log_approval_history_log_id_index` (`log_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `log_unapproval_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `log_unapproval_history` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `log_id` int NOT NULL,
  `user_id` int NOT NULL,
  `role` int NOT NULL,
  `approval_date` date NOT NULL,
  `signature_id` int NOT NULL,
  `reason_for_reject` int DEFAULT NULL,
  `approval_status` int NOT NULL,
  `reason_for_unapprove` int DEFAULT NULL,
  `unapproved_by` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `messages` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `text` text NOT NULL,
  `receiver_id` int unsigned NOT NULL,
  `sender_id` int unsigned NOT NULL,
  `receiver_read` tinyint unsigned NOT NULL,
  `sender_read` tinyint unsigned NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `receiver_id` (`receiver_id`),
  KEY `sender_id` (`sender_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `migrations` (
  `migration` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `batch` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `on_call_activities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `on_call_activities` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `action_id` int unsigned NOT NULL,
  `contract_id` int unsigned NOT NULL,
  `name` varchar(70) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `on_call_schedule`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `on_call_schedule` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `practice_id` int NOT NULL,
  `physician_id` int NOT NULL,
  `physician_type` int NOT NULL,
  `date` date NOT NULL,
  `agreement_id` int NOT NULL,
  `contract_id` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `otp_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `otp_history` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `email` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `otp` varchar(10) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `otp_expiry_date` datetime NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `otp_type` text CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `password_reminders`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `password_reminders` (
  `email` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `token` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  KEY `password_reminders_email_index` (`email`),
  KEY `password_reminders_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `payment_status_dashboard`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `payment_status_dashboard` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int NOT NULL,
  `practice_id` int NOT NULL,
  `contract_id` int NOT NULL,
  `contract_name_id` int NOT NULL,
  `hospital_id` int NOT NULL,
  `period_min_date` date NOT NULL,
  `period_max_date` date NOT NULL,
  `hours_approving` double(10,2) NOT NULL,
  `expected_hours` double(10,2) NOT NULL,
  `approved_logs` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '0',
  `approved_logs_hours_approving` double(10,2) NOT NULL,
  `pending_logs` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '0',
  `pending_logs_hours_approving` double(10,2) NOT NULL,
  `rejected_logs` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '0',
  `rejected_logs_hours_approving` double(10,2) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `payment_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `payment_types` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `description` text CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `performance_report`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `performance_report` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `created_by_user_id` int NOT NULL,
  `filename` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `report_type` tinyint NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physician invoice note is 1`;
/*!50001 DROP VIEW IF EXISTS `physician invoice note is 1`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `physician invoice note is 1` AS SELECT 
 1 AS `id`,
 1 AS `note_type`,
 1 AS `note_for`,
 1 AS `note_index`,
 1 AS `note`,
 1 AS `is_active`,
 1 AS `created_at`,
 1 AS `updated_at`,
 1 AS `hospital_id`*/;
SET character_set_client = @saved_cs_client;
DROP TABLE IF EXISTS `physician invoice note is 2`;
/*!50001 DROP VIEW IF EXISTS `physician invoice note is 2`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `physician invoice note is 2` AS SELECT 
 1 AS `id`,
 1 AS `note_type`,
 1 AS `note_for`,
 1 AS `note_index`,
 1 AS `note`,
 1 AS `is_active`,
 1 AS `created_at`,
 1 AS `updated_at`,
 1 AS `hospital_id`*/;
SET character_set_client = @saved_cs_client;
DROP TABLE IF EXISTS `physician invoice note is 3`;
/*!50001 DROP VIEW IF EXISTS `physician invoice note is 3`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `physician invoice note is 3` AS SELECT 
 1 AS `id`,
 1 AS `note_type`,
 1 AS `note_for`,
 1 AS `note_index`,
 1 AS `note`,
 1 AS `is_active`,
 1 AS `created_at`,
 1 AS `updated_at`,
 1 AS `hospital_id`*/;
SET character_set_client = @saved_cs_client;
DROP TABLE IF EXISTS `physician invoice note is 4`;
/*!50001 DROP VIEW IF EXISTS `physician invoice note is 4`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `physician invoice note is 4` AS SELECT 
 1 AS `id`,
 1 AS `note_type`,
 1 AS `note_for`,
 1 AS `note_index`,
 1 AS `note`,
 1 AS `is_active`,
 1 AS `created_at`,
 1 AS `updated_at`,
 1 AS `hospital_id`*/;
SET character_set_client = @saved_cs_client;
DROP TABLE IF EXISTS `physician_device_tokens`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physician_device_tokens` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int NOT NULL,
  `device_type` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `device_token` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physician_hospital_reports`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physician_hospital_reports` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `physician_id` int NOT NULL,
  `practice_id` int NOT NULL,
  `filename` varchar(250) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `type` tinyint NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physician_interface_lawson_apcinvoice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physician_interface_lawson_apcinvoice` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int NOT NULL,
  `cvi_company` int NOT NULL,
  `cvi_vendor` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `cvi_auth_code` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `cvi_proc_level` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `cvi_sep_chk_flag` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `cvi_term_code` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `cvi_rec_status` int NOT NULL,
  `cvi_posting_status` int NOT NULL,
  `cvi_bank_inst_code` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `cvi_invc_ref_type` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physician_log_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physician_log_history` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_log_id` int NOT NULL,
  `physician_id` int NOT NULL,
  `contract_id` int NOT NULL,
  `practice_id` int NOT NULL,
  `action_id` int NOT NULL,
  `date` date NOT NULL,
  `duration` float(8,2) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `signature` int NOT NULL,
  `details` varchar(500) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `approval_date` date NOT NULL,
  `entered_by` int NOT NULL,
  `entered_by_user_type` int NOT NULL,
  `am_pm_flag` int NOT NULL,
  `approved_by` int NOT NULL,
  `approving_user_type` int NOT NULL,
  `timeZone` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `signatureTimeZone` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `next_approver_level` int NOT NULL,
  `next_approver_user` int NOT NULL,
  `deleted_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `log_hours` double(12,10) NOT NULL DEFAULT '0.0000000000',
  `start_time` datetime DEFAULT NULL,
  `end_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physician_logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physician_logs` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int unsigned NOT NULL,
  `contract_id` int unsigned NOT NULL,
  `practice_id` int NOT NULL,
  `action_id` int unsigned NOT NULL,
  `date` date NOT NULL,
  `duration` float(5,2) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `signature` int NOT NULL,
  `details` varchar(500) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '',
  `approval_date` date NOT NULL DEFAULT '0000-00-00',
  `entered_by` int NOT NULL,
  `entered_by_user_type` int NOT NULL DEFAULT '0',
  `am_pm_flag` int NOT NULL,
  `approved_by` int NOT NULL DEFAULT '0',
  `approving_user_type` int NOT NULL DEFAULT '0',
  `timeZone` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `signatureTimeZone` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `next_approver_level` int NOT NULL,
  `next_approver_user` int NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `log_hours` double(13,10) NOT NULL,
  `time_to_approve_by_physician` int NOT NULL DEFAULT '0',
  `time_to_approve_by_level_1` int NOT NULL DEFAULT '0',
  `time_to_approve_by_level_2` int NOT NULL DEFAULT '0',
  `time_to_approve_by_level_3` int NOT NULL DEFAULT '0',
  `time_to_approve_by_level_4` int NOT NULL DEFAULT '0',
  `time_to_approve_by_level_5` int NOT NULL DEFAULT '0',
  `time_to_approve_by_level_6` int NOT NULL DEFAULT '0',
  `time_to_payment` int NOT NULL DEFAULT '0',
  `start_time` datetime DEFAULT NULL,
  `end_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `action_id` (`action_id`),
  KEY `contract_id` (`contract_id`),
  KEY `physician_id` (`physician_id`),
  KEY `physician_logs_date_index` (`date`),
  KEY `physician_logs_practice_id_index` (`practice_id`),
  KEY `physician_logs_next_approver_user_index` (`next_approver_user`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physician_payments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physician_payments` (
  `id` int NOT NULL AUTO_INCREMENT,
  `agreement_id` int NOT NULL,
  `physician_id` int NOT NULL,
  `month` int NOT NULL,
  `amount` float NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physician_practice_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physician_practice_history` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int NOT NULL,
  `practice_id` int NOT NULL,
  `npi` char(10) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `first_name` varchar(25) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `last_name` varchar(25) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `email` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `specialty_id` tinyint NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `start_date` datetime NOT NULL,
  `end_date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physician_practices`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physician_practices` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int NOT NULL,
  `practice_id` int NOT NULL,
  `hospital_id` int NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `physician_practices_physician_id_index` (`physician_id`),
  KEY `physician_practices_practice_id_index` (`practice_id`),
  KEY `physician_practices_hospital_id_index` (`hospital_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physician_reports`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physician_reports` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` int unsigned NOT NULL,
  `filename` varchar(255) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `practice_id` int NOT NULL,
  PRIMARY KEY (`id`),
  KEY `physician_id` (`physician_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physician_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physician_types` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `type` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physicians`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `physicians` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `npi` char(10) DEFAULT NULL,
  `first_name` varchar(25) NOT NULL,
  `last_name` varchar(25) NOT NULL,
  `email` varchar(50) NOT NULL,
  `password` varchar(60) NOT NULL,
  `password_text` varchar(60) NOT NULL,
  `phone` char(14) DEFAULT NULL,
  `practice_id` int unsigned NOT NULL,
  `specialty_id` tinyint unsigned NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `npi` (`npi`),
  KEY `speciality` (`specialty_id`),
  KEY `practice` (`practice_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `physlog`;
/*!50001 DROP VIEW IF EXISTS `physlog`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `physlog` AS SELECT 
 1 AS `physician_id`,
 1 AS `contract_id`,
 1 AS `practice_id`,
 1 AS `AppDate`*/;
SET character_set_client = @saved_cs_client;
DROP TABLE IF EXISTS `practice_reports`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `practice_reports` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `practice_id` int unsigned NOT NULL,
  `filename` varchar(255) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `practice_id` (`practice_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `practice_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `practice_types` (
  `id` smallint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `description` text NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `practice_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `practice_user` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `practice_id` int unsigned NOT NULL,
  `user_id` int unsigned NOT NULL,
  `primary` tinyint NOT NULL,
  PRIMARY KEY (`id`),
  KEY `practice_id` (`practice_id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `practiceManagerReport`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `practiceManagerReport` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `practice_id` int NOT NULL,
  `filename` varchar(250) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `type` tinyint NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `practices`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `practices` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `npi` char(10) NOT NULL,
  `hospital_id` int unsigned NOT NULL,
  `name` varchar(50) NOT NULL,
  `practice_type_id` smallint unsigned NOT NULL,
  `specialty_id` int DEFAULT NULL,
  `state_id` tinyint unsigned NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `hospital` (`hospital_id`),
  KEY `type` (`practice_type_id`),
  KEY `state_id` (`state_id`),
  FULLTEXT KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `proxy_approver_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `proxy_approver_details` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `proxy_approver_id` int NOT NULL,
  `created_by_user_id` int NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `region_hospitals`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `region_hospitals` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `hospital_id` int NOT NULL,
  `region_id` int NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `region_hospitals_region_id_index` (`region_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `regions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `regions` (
  `id` tinyint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `rehab_admin_hours`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `rehab_admin_hours` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `admin_hours` double(5,2) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `rehab_admin_hours_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `rehab_admin_hours_history` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `admin_hours` double(5,2) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_active` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '0',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `rehab_days_week_calculation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `rehab_days_week_calculation` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `start_date` date NOT NULL,
  `days_count` int NOT NULL,
  `week_count` double(5,1) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `rehab_max_hours_per_week`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `rehab_max_hours_per_week` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `max_hours_per_week` double(5,2) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `rehab_max_hours_per_week_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `rehab_max_hours_per_week_history` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `max_hours_per_week` double(5,2) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_active` enum('0','1') CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '0',
  `created_by` int NOT NULL,
  `updated_by` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `rejected_log_reasons`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `rejected_log_reasons` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `reason` varchar(500) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `is_custom_reason` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `restorerequests`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `restorerequests` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int unsigned NOT NULL,
  `passkey` varchar(40) NOT NULL,
  `created_at` datetime NOT NULL,
  `expires_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `signature`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `signature` (
  `signature_id` int unsigned NOT NULL AUTO_INCREMENT,
  `physician_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `signature_path` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `tokken_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `date` date NOT NULL,
  `updated_at` date NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`signature_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `sorting_contract_activities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sorting_contract_activities` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `category_id` int NOT NULL,
  `action_id` int NOT NULL,
  `sort_order` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `sorting_contract_names`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sorting_contract_names` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `practice_id` int NOT NULL,
  `physician_id` int NOT NULL,
  `contract_id` int NOT NULL,
  `sort_order` int NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `specialties`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `specialties` (
  `id` tinyint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(25) NOT NULL,
  `fmv_rate` decimal(5,2) unsigned NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `split_payment_percentage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `split_payment_percentage` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `contract_id` int NOT NULL,
  `hospital_id` int NOT NULL,
  `payment_percentage_index` int NOT NULL,
  `payment_percentage` decimal(5,2) DEFAULT NULL,
  `payment_note_1` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `payment_note_2` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `payment_note_3` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `payment_note_4` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `start_date` datetime NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `sso_client_domains`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sso_client_domains` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `sso_client_id` bigint unsigned NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `sso_clients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sso_clients` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `client_name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `label` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `identity_provider` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `states`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `states` (
  `id` tinyint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  `region_id` tinyint unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `region` (`region_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `system_logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `system_logs` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `url` varchar(200) NOT NULL,
  `input` text NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `ticket_messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ticket_messages` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int unsigned NOT NULL,
  `body` text NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `ticket_id` int unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `ticket_id` (`ticket_id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `tickets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tickets` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int unsigned NOT NULL,
  `subject` varchar(255) NOT NULL,
  `body` text,
  `open` tinyint(1) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `submitted_by` (`user_id`),
  KEY `accepted_answer` (`open`),
  KEY `accepted_answer_2` (`open`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `user_signatures`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_signatures` (
  `signature_id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `signature_path` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`signature_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `email` varchar(50) NOT NULL,
  `initials` varchar(2) NOT NULL,
  `first_name` varchar(15) NOT NULL,
  `last_name` varchar(15) NOT NULL,
  `password` varchar(60) NOT NULL,
  `password_text` varchar(60) NOT NULL,
  `group_id` tinyint unsigned NOT NULL,
  `phone` char(14) NOT NULL,
  `remember_token` varchar(100) NOT NULL,
  `unsuccessful_login_attempts` int unsigned NOT NULL DEFAULT '0',
  `locked` tinyint unsigned NOT NULL DEFAULT '0',
  `password_expiration_date` date NOT NULL DEFAULT '2099-01-01',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `seen_at` datetime NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `title` varchar(20) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `type` (`group_id`),
  KEY `type_2` (`group_id`),
  KEY `type_3` (`group_id`),
  KEY `type_4` (`group_id`),
  KEY `type_5` (`group_id`),
  KEY `type_6` (`group_id`),
  KEY `type_7` (`group_id`),
  KEY `type_8` (`group_id`),
  KEY `users_unsuccessful_login_attempts_index` (`unsuccessful_login_attempts`),
  KEY `users_locked_index` (`locked`),
  KEY `users_password_expiration_date_index` (`password_expiration_date`),
  FULLTEXT KEY `first_name` (`first_name`),
  FULLTEXT KEY `last_name` (`last_name`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
DROP TABLE IF EXISTS `uuids`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `uuids` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `uuid` varchar(255) NOT NULL,
  `physician_id` int unsigned NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uuid` (`uuid`),
  KEY `physician_id` (`physician_id`)
) ENGINE=InnoDB DEFAULT CHARSET=cp1251;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 DROP PROCEDURE IF EXISTS `ContractDeets` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `ContractDeets`()
BEGIN 

CREATE TEMPORARY TABLE IF NOT EXISTS 
  oca22  
AS (SELECT NAME AS OnCallName,contract_id FROM on_call_activities WHERE action_id = 2222 );


CREATE TEMPORARY TABLE IF NOT EXISTS 
  oca23  
AS (SELECT NAME AS CallBackName,contract_id FROM on_call_activities WHERE action_id = 2223);



CREATE TEMPORARY TABLE IF NOT EXISTS 
  oca24  
AS (SELECT NAME AS CalledInName,contract_id FROM on_call_activities WHERE action_id = 2224);
 


SET @HealthSystemNameVar = 'ARDENT' ;
 
SELECT hs.health_system_name, h.name AS Facility,hsr.region_name AS Division,p.npi AS NPI,CONCAT(p.last_name,', ',p.first_name) AS PhysicianName
,s.name AS PhysSpecialty
,pr.name AS PracticeName,
pt.name as PracticeType,
c.id AS ContractId,
payt.name AS PaymentType,
ct.name AS ContractType,
cn.name AS ContractName,
c.min_hours AS MonthlyMin,
c.max_hours AS MonthlyMax,
c.expected_hours AS MonthlyExpected,
c.annual_cap AS YearlyMax,
CONCAT('$',c.rate) AS Rate,
c.weekday_rate AS WeekDayRate, 
c.weekend_rate AS WeekEndRate,
c.holiday_rate AS HolidayRate,
OnCallName,
nullif(c.on_call_rate,0.00) AS OnCallRate,
CallBackName,
nullif(c.called_back_rate,0.00) AS CalledBackRate,
CalledInName,
nullif(c.called_in_rate,0.00) AS CalledInRate 
FROM (
SELECT * FROM hospitals h WHERE deleted_at IS NULL AND archived = 0) h 
INNER JOIN (SELECT * from region_hospitals rh WHERE rh.deleted_at IS NULL) rh ON h.id = rh.hospital_id 
INNER JOIN health_system_regions hsr ON rh.region_id = hsr.id
INNER JOIN health_system hs ON hsr.health_system_id = hs.id
INNER JOIN agreements a ON a.hospital_id = h.id
INNER JOIN (SELECT * FROM contracts c WHERE c.deleted_at IS NULL AND manually_archived = 0 AND archived = 0 AND manual_contract_end_date >=CURDATE()) c ON c.agreement_id = a.id
INNER JOIN (SELECT * from physicians p WHERE p.deleted_at IS NULL) p ON c.physician_id = p.id
INNER JOIN contract_types ct ON ct.id = c.contract_type_id
INNER JOIN (SELECT * from physician_practices WHERE deleted_at IS NULL) php ON php.physician_id = p.id
INNER JOIN practices pr ON php.practice_id = pr.id
INNER JOIN specialties s ON s.id = p.specialty_id
INNER JOIN practice_types pt ON pr.practice_type_id = pt.id
INNER JOIN contract_names cn ON cn.id = c.contract_name_id
INNER JOIN payment_types payt ON payt.id = c.payment_type_id
LEFT OUTER JOIN   oca22 ON c.id = oca22.contract_id
LEFT OUTER JOIN  oca23 ON c.id = oca23.contract_id
LEFT OUTER JOIN  oca24 ON c.id = oca24.contract_id
WHERE hs.health_system_name LIKE '%@HealthSystemNameVar%' ; 


DROP TABLE oca22;
DROP TABLE oca23;
DROP TABLE oca24;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContractDetes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `ContractDetes`(
	IN `Param1` VARCHAR(50)
)
BEGIN 

CREATE TEMPORARY TABLE IF NOT EXISTS 
  oca22  
AS (SELECT NAME AS OnCallName,contract_id FROM on_call_activities WHERE action_id = 2222 );


CREATE TEMPORARY TABLE IF NOT EXISTS 
  oca23  
AS (SELECT NAME AS CallBackName,contract_id FROM on_call_activities WHERE action_id = 2223);



CREATE TEMPORARY TABLE IF NOT EXISTS 
  oca24  
AS (SELECT NAME AS CalledInName,contract_id FROM on_call_activities WHERE action_id = 2224);


 
SELECT hs.health_system_name, h.name AS Facility,hsr.region_name AS Division,p.npi AS NPI,CONCAT(p.last_name,', ',p.first_name) AS PhysicianName
,s.name AS PhysSpecialty
,pr.name AS PracticeName,
pt.name as PracticeType,
c.id AS ContractId,
payt.name AS PaymentType,
ct.name AS ContractType,
cn.name AS ContractName,
c.min_hours AS MonthlyMin,
c.max_hours AS MonthlyMax,
c.expected_hours AS MonthlyExpected,
c.annual_cap AS YearlyMax,
CONCAT('$',c.rate) AS Rate,
c.weekday_rate AS WeekDayRate, 
c.weekend_rate AS WeekEndRate,
c.holiday_rate AS HolidayRate,
OnCallName,
nullif(c.on_call_rate,0.00) AS OnCallRate,
CallBackName,
nullif(c.called_back_rate,0.00) AS CalledBackRate,
CalledInName,
nullif(c.called_in_rate,0.00) AS CalledInRate 
FROM (
SELECT * FROM hospitals h WHERE deleted_at IS NULL AND archived = 0) h 
INNER JOIN (SELECT * from region_hospitals rh WHERE rh.deleted_at IS NULL) rh ON h.id = rh.hospital_id 
INNER JOIN health_system_regions hsr ON rh.region_id = hsr.id
INNER JOIN health_system hs ON hsr.health_system_id = hs.id
INNER JOIN agreements a ON a.hospital_id = h.id
INNER JOIN (SELECT * FROM contracts c WHERE c.deleted_at IS NULL AND manually_archived = 0 AND archived = 0 AND manual_contract_end_date >=CURDATE()) c ON c.agreement_id = a.id
INNER JOIN (SELECT * from physicians p WHERE p.deleted_at IS NULL) p ON c.physician_id = p.id
INNER JOIN contract_types ct ON ct.id = c.contract_type_id
INNER JOIN (SELECT * from physician_practices WHERE deleted_at IS NULL) php ON php.physician_id = p.id
INNER JOIN practices pr ON php.practice_id = pr.id
INNER JOIN specialties s ON s.id = p.specialty_id
INNER JOIN practice_types pt ON pr.practice_type_id = pt.id
INNER JOIN contract_names cn ON cn.id = c.contract_name_id
INNER JOIN payment_types payt ON payt.id = c.payment_type_id
LEFT OUTER JOIN   oca22 ON c.id = oca22.contract_id
LEFT OUTER JOIN  oca23 ON c.id = oca23.contract_id
LEFT OUTER JOIN  oca24 ON c.id = oca24.contract_id
WHERE hs.health_system_name IN (Param1)   ;  
DROP TABLE oca22;
DROP TABLE oca23;
DROP TABLE oca24;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_agreement_payment_info_v4` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_agreement_payment_info_v4`(
	IN `agreement_id` INT,
	IN `in_period_number` INT,
	IN `in_practice_id` INT,
	IN `in_payment_type_id` INT,
	IN `in_contract_type_id` INT,
	IN `in_physician_id` INT,
	IN `in_contract_name_id` INT,
	IN `deployment_date` date
)
BEGIN

    

	DECLARE agreement_start_date DATETIME;
	DECLARE agreement_end_date DATETIME;
	DECLARE agreement_valid_upto DATETIME;
	DECLARE agreement_hospital_id INT;
	DECLARE agreement_name VARCHAR(35);
	DECLARE term int;
	DECLARE counter int;
	DECLARE start_date DATETIME;
	DECLARE end_date DATETIME;
    DECLARE period_number int;
    DECLARE contract_id int;
    DECLARE contract_name VARCHAR(35);
    DECLARE contract_name_id int;
	DECLARE practice_id int;
    DECLARE practice_name VARCHAR(35);
    DECLARE physician_id int;
    DECLARE physician_name VARCHAR(35);
    DECLARE contract_type_id int;
    DECLARE payment_type_id int;
    DECLARE selected_period_start_date DATE;
    DECLARE selected_period_end_date DATE;
	DECLARE start_day int;
	DECLARE end_day int;
	DECLARE total_log_count FLOAT;
	DECLARE temp_day_count int;
	DECLARE agreement_day_of_month INT;
	DECLARE current_period_start_date DATE;
    DECLARE period_type INT;
    DECLARE payment_frequency_start_date DATETIME;

	DECLARE per_diem_annual_max_payment FLOAT;
	DECLARE temp_annual_max_payment FLOAT;
	DECLARE last_day_of_current_month int;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
     BEGIN
        SHOW ERRORS;
    END;

	SET sql_mode='';
	SET @enabled = TRUE;


    DROP TEMPORARY TABLE  IF EXISTS `temp_payment_agreement_term_dates`;
    CREATE TEMPORARY TABLE `temp_payment_agreement_term_dates`(
		`agreement_id` INT NOT NULL,
		`period_number` INT NOT NULL,
		`start_date` DATE,
		`end_date` DATE
	);



    DROP TEMPORARY TABLE  IF EXISTS `temp_payment_logs`;
    CREATE TEMPORARY TABLE `temp_payment_logs`(
		`contract_id` INT NOT NULL,
		`practice_id` INT NOT NULL,
		`physician_id` INT NOT NULL,
		`action_id` INT NOT NULL,
		`action_name` VARCHAR(35),
        `action_type_id` INT NULL,
        `log_date` DATE,
        `log_hours` FLOAT,
		`log_hours_calculated` FLOAT,
        `contract_rate` DECIMAL(10,2)
	);




    DROP TEMPORARY TABLE  IF EXISTS `temp_agreement_payments`;
    CREATE TEMPORARY TABLE `temp_agreement_payments`(
        `sort_field` VARCHAR(35),
        `agreement_id` INT NOT NULL,
        `agreement_name` VARCHAR(35) NULL,
		`contract_id` INT NOT NULL,
        `contract_name_id` INT NOT NULL,
        `contract_name` VARCHAR(35) NOT NULL,
        `contract_type_id` INT NOT NULL,
        `payment_type_id` INT NOT NULL,
        `contract_period` VARCHAR(35) NOT NULL,
        `start_date` DATE NOT NULL,
        `end_Date` DATE NOT NULL,
        `contract_annual_max_hours` FLOAT NOT NULL,
        `contract_min_hours` FLOAT NOT NULL,
        `contract_max_hours` FLOAT NOT NULL,
        `contract_expected_hours` FLOAT NOT NULL,
		`worked_hours` FLOAT NOT NULL,
        `practice_id` INT NOT NULL,
        `practice_name` VARCHAR(35) NOT NULL,
        `is_amount_remaining` boolean default false,
        `amount_paid` DECIMAL(10,2) NOT NULL,
		`amount_paid_id` INT NOT NULL,
        `physician_id` INT NOT NULL,
        `physician_name` VARCHAR(35) NOT NULL,
        `remaining_amount` DECIMAL(10, 2) NOT NULL,
		`annual_max_payment` DECIMAL(10,2) NOT NULL,
        `fmv_rate` DECIMAL(10,2) NOT NULL,
		`final_payment` boolean default false,
		`invoice_no` VARCHAR(35)
	);


    DROP TEMPORARY TABLE  IF EXISTS `temp_contract_rate`;
    CREATE TEMPORARY TABLE `temp_contract_rate`(
		`contract_rate` DECIMAL(10,2),
		`range_start_day` INT NOT NULL,
        `range_end_day` INT NOT NULL
	);


	SELECT agreements.name , agreements.hospital_id,
    agreements.start_date, agreements.end_date, agreements.valid_upto, agreements.payment_frequency_type , agreements.payment_frequency_start_date
    into agreement_name, agreement_hospital_id, agreement_start_date, agreement_end_date, agreement_valid_upto, period_type, payment_frequency_start_date
    FROM agreements WHERE agreements.id = agreement_id AND IsNull(agreements.deleted_at);




	IF agreement_valid_upto = "0000-00-00" THEN
		SET agreement_valid_upto = agreement_end_date;
	ELSE
		SET agreement_valid_upto = agreement_valid_upto;
	END IF;




    SET start_date = payment_frequency_start_date;


    IF period_type = 1 THEN
        SET end_date=DATE_ADD(start_date,INTERVAL 1 MONTH);
        SET term = TIMESTAMPDIFF(MONTH, payment_frequency_start_date, NOW());
    ELSEIf period_type = 2 THEN
        SET end_date=DATE_ADD(start_date,INTERVAL 7 DAY);
        SET term = ROUND(DATEDIFF(NOW(), payment_frequency_start_date)/7, 0);
    ELSEIf period_type = 3 THEN
        SET end_date=DATE_ADD(start_date,INTERVAL 14 DAY);
        SET term = ROUND(DATEDIFF(NOW(), payment_frequency_start_date)/14, 0);
    ELSEIf period_type = 4 THEN
        SET end_date=DATE_ADD(start_date,INTERVAL 3 MONTH);
        SET term = CEIL(TIMESTAMPDIFF(MONTH, payment_frequency_start_date, NOW()) / 3);
    END IF;

	SET end_date=DATE_SUB(end_date, INTERVAL 1 DAY);

	SET counter=0;
	create_contract_period_loop: LOOP
		IF counter < term THEN
			INSERT INTO  `temp_payment_agreement_term_dates` VALUES(agreement_id, counter +1 , start_date, end_date);

            SET start_date=DATE_ADD(end_date, INTERVAL 1 DAY);


            IF period_type = 1 THEN
                SET end_date=DATE_ADD(start_date,INTERVAL 1 MONTH);
            ELSEIf period_type = 2 THEN
                SET end_date=DATE_ADD(start_date,INTERVAL 7 DAY);
            ELSEIf period_type = 3 THEN
                SET end_date=DATE_ADD(start_date,INTERVAL 14 DAY);
            ELSEIf period_type = 4 THEN
                SET end_date=DATE_ADD(start_date,INTERVAL 3 MONTH);
            END IF;

			SET end_date=DATE_SUB(end_date, INTERVAL 1 DAY);
			SET counter= counter + 1;
		ELSE
			LEAVE create_contract_period_loop;
		END IF;
	END LOOP;



	DROP TEMPORARY TABLE  IF EXISTS `temp_agreement_physicians`;
	CREATE TEMPORARY TABLE `temp_agreement_physicians`
	(
		`contract_id` INT NOT NULL,
		`contract_name` VARCHAR(50) NOT NULL,
		`contract_name_id` INT NOT NULL,
		`physician_id` INT NOT NULL,
		`physician_name` VARCHAR(35) NOT NULL,
		`contract_type_id` INT NOT NULL,
		`payment_type_id` INT NOT NULL,
		`expected_hours` float NOT NULL default 0.00,
		`min_hours` float NOT NULL default 0.00,
        `max_hours` float NOT NULL default 0.00,
        `annual_cap` float NOT NULL default 0.00,
		`annual_max_payment` float NOT NULL default 0.00,
		`practice_id` INT NOT NULL,
		`practice_name` VARCHAR(50) NOT NULL,
		`prior_start_date` DATE NOT NULL,
		`prior_amount_paid` float NOT NULL default 0.00
	);


    SELECT tatd.start_date, tatd.end_date, tatd.period_number
    INTO selected_period_start_date, selected_period_end_date, period_number from
    temp_payment_agreement_term_dates tatd where tatd.period_number = in_period_number;

	 SET @contracts_queryString = CONCAT('INSERT INTO temp_agreement_physicians
									SELECT c.id, cn.name, c.contract_name_id, c.physician_id ,
									concat(ph.last_name,", ", ph.first_name) as physician_name,
									c.contract_type_id, c.payment_type_id, c.expected_hours, c.min_hours,
                                    c.max_hours, c.annual_cap, c.annual_max_payment, p.id, p.name as practice_name,
									c.prior_start_date as prior_start_date, c.prior_amount_paid as prior_amount_paid
									 FROM contracts c JOIN contract_names cn ON c.contract_name_id= cn.id
									 JOIN physicians ph ON ph.id = c.physician_id
									 JOIN practices p on p.id = c.practice_id WHERE c.agreement_id= ', agreement_id,
 									 ' AND p.hospital_id =',agreement_hospital_id,' AND c.end_date = "0000-00-00 00:00:00"
                                      AND IsNull(c.deleted_at) and IsNull(p.deleted_at) and c.manually_archived = 0');





    IF in_contract_name_id > 0 THEN
       SET @contracts_queryString = CONCAT(@contracts_queryString, ' AND c.contract_name_id= ', in_contract_name_id);
    END IF;

	IF in_contract_type_id > 0 THEN
       SET @contracts_queryString = CONCAT(@contracts_queryString, ' AND c.contract_type_id= ', in_contract_type_id);
    END IF;

	IF in_practice_id > 0 THEN
       SET @contracts_queryString = CONCAT(@contracts_queryString, ' AND p.id= ', in_practice_id);
    END IF;

	IF in_payment_type_id > 0 THEN
       SET @contracts_queryString = CONCAT(@contracts_queryString, ' AND c.payment_type_id= ', in_payment_type_id);
    END IF;

	IF in_physician_id > 0 THEN
       SET @contracts_queryString = CONCAT(@contracts_queryString, ' AND c.physician_id= ', in_physician_id);
    END IF;

    SET @contracts_queryString = CONCAT(@contracts_queryString,' order by c.physician_id;');




    PREPARE contracts_stmt FROM @contracts_queryString;
	EXECUTE contracts_stmt;
	DEALLOCATE PREPARE contracts_stmt;



	BLOCK_PHYSICIANS: BEGIN
        DECLARE contract_max_hours FLOAT default 0.00;
        DECLARE contract_annual_cap FLOAT default 0.00;
        DECLARE contract_min_hours FLOAT default 0.00;
        DECLARE contract_expected_hours FLOAT default 0.00;
		DECLARE temp_log_count int default 0;
		DECLARE calculated_amount decimal(10,2) default 0.00;
		DECLARE sum_amount_paid decimal(10,2) default 0.00;
		DECLARE fmv_rate decimal(10,2) default 0.00;
		DECLARE fmv decimal(10,2) default 0.00;
		DECLARE log_hours_sum float default 0.00;
		DECLARE log_hours_sum_cumulataive float default 0.00;
		DECLARE sum_amount_paid_cumulative decimal(10,2) default 0.00;
		DECLARE is_remaining_amount boolean default false;
        DECLARE remaining_amount DECIMAL(10,2) default 0.00;
        DECLARE oncall_calculated_payment decimal(10,2) default 0.00;
        DECLARE check_record_count int default 0;
        DECLARE annual_max_payment DECIMAL(10,2) default 0.00;
		DECLARE expected_payment_to_be_paid DECIMAL(10,2) default 0.00;
		DECLARE annual_remaining DECIMAL(10,2) default 0.00;
		DECLARE agreement_year_start_date date;
		DECLARE agreement_year_end_date date;
        DECLARE agreement_interval varchar(30) default null;
        DECLARE agreement_year_start_date_mod int default 0;
        DECLARE agreement_year_start_date_diff int default 0;
		DECLARE prior_start_date date;
		DECLARE prior_amount_paid DECIMAL(10,2) default 0.00;
		DECLARE var_max_hours_per_week DECIMAL(10,2) default 0.00;
        DECLARE var_week_count DECIMAL(10,2) default 0.00;
        DECLARE var_admin_hours DECIMAL(10,2) default 0.00;



		DECLARE no_more_physicians_rows boolean default FALSE;

		DECLARE cur_contract_practice_physicians cursor for select * from temp_agreement_physicians;
		DECLARE continue handler for not found set no_more_physicians_rows = TRUE;

		OPEN cur_contract_practice_physicians;
		REPEAT
			FETCH cur_contract_practice_physicians INTO contract_id, contract_name, contract_name_id, physician_id, physician_name,
				contract_type_id, payment_type_id, contract_expected_hours, contract_min_hours, contract_max_hours,
                contract_annual_cap, temp_annual_max_payment, practice_id, practice_name, prior_start_date, prior_amount_paid;

            truncate temp_payment_logs;
			if not no_more_physicians_rows then
				SET @logs_queryString = CONCAT('INSERT INTO temp_payment_logs
								SELECT pl.contract_id, pl.practice_id, pl.physician_id, pl.action_id, actions.name, action_type_id, date, duration, log_hours,
								  (select contract_rate.rate from contract_rate
									where contract_rate.contract_id = pl.contract_id and
									contract_rate.effective_start_date <= "', selected_period_start_date,
									'" and contract_rate.status = "1"
									and case
									  when Instr(actions.name, "Weekend") > 0 then  contract_rate.rate_type = 6
									  when Instr(actions.name, "Holiday") > 0 then contract_rate.rate_type = 7
									   when Instr(actions.name, "On-Call") > 0 then contract_rate.rate_type = 2
									  when Instr(actions.name, "Called-back") > 0  then contract_rate.rate_type =3
									  when Instr(actions.name, "Called-In") > 0 then contract_rate.rate_type =4
									  when Instr(actions.name, "Weekday") > 0 then contract_rate.rate_type = 5
									  when Instr(actions.name, "On-Call/Uncompensated") > 0 then contract_rate.rate_type = 8
									  else contract_rate.rate_type IN (1, 9)
									  end  order by effective_start_date desc limit 1) as contract_rate
								FROM physician_logs pl JOIN actions  on actions.id = pl.action_id
								JOIN contracts c on c.id = pl.contract_id
								where pl.contract_id = ', contract_id,
								' and pl.practice_id = ', practice_id,
								' and pl.physician_id = ', physician_id,
								' and IF(c.payment_type_id = 9, actions.category_id, "") !=  "12"' 
								' and (pl.approval_date <> "0000-00-00" OR pl.signature <> 0)
								 and pl.date between "', selected_period_start_date ,
								'" and "', selected_period_end_date, '" order by pl.date ASC ;');

                PREPARE logs_query_stmt FROM @logs_queryString;

				EXECUTE logs_query_stmt;
				DEALLOCATE PREPARE logs_query_stmt;


				set is_remaining_amount = false;
                set remaining_amount = 0.00;
                set sum_amount_paid = 0.00;
                set log_hours_sum = 0.00;
                set log_hours_sum_cumulataive = 0.00;
                set sum_amount_paid_cumulative = 0.00;
				set calculated_amount = 0.00;

				BLOCK_AMOUNT_PAID: BEGIN
				DECLARE no_more_amount_paid_rows boolean default FALSE;
				DECLARE continue handler for not found set no_more_amount_paid_rows = TRUE;

				SELECT sum(amountPaid) into sum_amount_paid FROM amount_paid WHERE amount_paid.physician_id = physician_id
				AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
				AND amount_paid.start_date >= selected_period_start_date AND amount_paid.end_date <= selected_period_end_date
				limit 1;


				if IsNull(sum_amount_paid) then
					set sum_amount_paid = 0.00;
				end if;

				SELECT sum(log_hours_calculated) into log_hours_sum from temp_payment_logs where temp_payment_logs.contract_id =  contract_id
				and temp_payment_logs.practice_id = practice_id
				and temp_payment_logs.physician_id = physician_id
				and temp_payment_logs.log_date between selected_period_start_date
				and selected_period_end_date order by temp_payment_logs.log_date ASC;

				if IsNull(log_hours_sum) then
					set log_hours_sum = 0.00;
				end if;


				 IF (payment_type_id <> 3) AND (payment_type_id <> 5)THEN
					SELECT rate into fmv_rate FROM contract_rate cr where effective_start_date <= selected_period_start_date
					and cr.contract_id = contract_id and rate_type = 1 and status = '1' order by effective_start_date desc limit 1;


					IF payment_type_id = 1 OR payment_type_id = 7 THEN
					   IF period_number > 1 THEN

							SELECT sum(duration) into log_hours_sum_cumulataive from physician_logs where physician_logs.contract_id =  contract_id
							and physician_logs.practice_id = practice_id
							and physician_logs.physician_id = physician_id
							and (physician_logs.approval_date <> "0000-00-00" OR physician_logs.signature <> 0)
							and physician_logs.date <= end_date order by physician_logs.date ASC;

							if IsNull(log_hours_sum_cumulataive) then
								set log_hours_sum_cumulataive = 0.00;
							end if;

							SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE amount_paid.physician_id = physician_id
							AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
							AND amount_paid.start_date >= agreement_start_date AND amount_paid.end_date <= end_date limit 1;

							 if IsNull(sum_amount_paid_cumulative) then
								set sum_amount_paid_cumulative = 0.00;
							end if;

							IF log_hours_sum_cumulataive > 0.00 THEN
								set fmv = sum_amount_paid_cumulative / log_hours_sum_cumulataive;
							ELSE
								set fmv = sum_amount_paid_cumulative;
							END IF;


							IF (fmv <= fmv_rate AND log_hours_sum >= contract_min_hours) THEN
								SET calculated_amount = fmv_rate * contract_expected_hours;
								IF (sum_amount_paid = 0.00 AND calculated_amount > 0.00) THEN
									SET is_remaining_amount = true;
								ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) then
									SET is_remaining_amount = true;
								END IF;
								SET remaining_amount = calculated_amount - sum_amount_paid;
							ELSE
								SET remaining_amount = 0.00;
							END IF;

						ELSE

							IF (contract_min_hours <= log_hours_sum) THEN
								SET calculated_amount = fmv_rate * contract_expected_hours;
								IF (sum_amount_paid = 0.00 AND calculated_amount > 0.00) THEN
									SET is_remaining_amount = true;
									SET remaining_amount = calculated_amount;
								ELSE
									IF ((calculated_amount - sum_amount_paid) > 0.00 and start_date > deployment_date) THEN
										SET is_remaining_amount = true;
										SET remaining_amount = calculated_amount - sum_amount_paid;
									END IF;
								END IF;
							ELSE
								SET remaining_amount = 0.00;
							END IF;
						END IF;
					ELSEIF payment_type_id = 6 THEN
						select DAY(agreement_start_date) into agreement_day_of_month;
						

						SET last_day_of_current_month = DAY(LAST_DAY(NOW()));
						IF agreement_day_of_month > last_day_of_current_month THEN
							SET current_period_start_date = last_day_of_current_month;
						ELSE
							SET current_period_start_date = agreement_day_of_month;
						END IF;

						SET current_period_start_date = DATE_FORMAT(NOW() ,concat('%Y-%m','-',current_period_start_date));

						IF DATE_FORMAT(selected_period_start_date, ('%Y-%m-%d')) < current_period_start_date THEN
							SELECT rate into fmv_rate FROM contract_rate cr where effective_start_date <= selected_period_start_date
							and cr.contract_id = contract_id and rate_type = 9 and status = '1' order by effective_start_date desc limit 1;

							IF ( contract_min_hours <= log_hours_sum) THEN
								SET calculated_amount = fmv_rate;
								IF (sum_amount_paid = 0.00 AND calculated_amount > 0.00) THEN
									SET is_remaining_amount = true;
								ELSEIF (sum_amount_paid < calculated_amount and selected_period_start_date > deployment_date) then
									SET is_remaining_amount = true;
								END IF;
								SET remaining_amount = calculated_amount - sum_amount_paid;
							ELSE
								SET remaining_amount = 0.00;
							END IF;
						END IF;
					ELSE

						IF payment_type_id = 2 OR payment_type_id = 8 THEN
							
                            IF(prior_start_date <> '0000-00-00') THEN
								SET agreement_start_date = prior_start_date;
                            END IF;
							SET agreement_year_start_date_diff=TIMESTAMPDIFF(MONTH, agreement_start_date, selected_period_start_date);

							SET agreement_year_start_date_mod=agreement_year_start_date_diff DIV 12;
                            SET agreement_interval=CONCAT('INTERVAL ',agreement_year_start_date_mod,' YEAR');
                            SET @querystring =CONCAT('SELECT (DATE_ADD("',agreement_start_date,'",', agreement_interval,')) into @agreement_year_start_date');
                            PREPARE stmt from @querystring;
                            EXECUTE stmt;
							DEALLOCATE PREPARE stmt;

							SET agreement_year_end_date=DATE_SUB(DATE_ADD(@agreement_year_start_date, INTERVAL 1 YEAR), INTERVAL 1 DAY);

							IF agreement_year_start_date_mod = 0 THEN
								SET expected_payment_to_be_paid =  (contract_annual_cap * fmv_rate) - prior_amount_paid;
							ELSE
								SET expected_payment_to_be_paid =  contract_annual_cap * fmv_rate;
							END IF;

							SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE amount_paid.physician_id = physician_id
							AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
							AND amount_paid.start_date >= @agreement_year_start_date AND amount_paid.end_date <= agreement_year_end_date limit 1;
							IF ISNULL(sum_amount_paid_cumulative) THEN
								SET sum_amount_paid_cumulative = 0.00;
							END IF;
							SET annual_remaining = expected_payment_to_be_paid - (sum_amount_paid_cumulative - sum_amount_paid);

                            IF annual_remaining < 0 THEN
								SET annual_max_payment= 0.0;
								SET calculated_amount = 0.0;
							ELSE
								SET annual_max_payment=annual_remaining;

								IF ( log_hours_sum  <= contract_max_hours) THEN
								SET calculated_amount = fmv_rate * log_hours_sum;
								ELSE
									SET calculated_amount = fmv_rate * contract_max_hours;
								END IF;
								
								IF annual_max_payment <= calculated_amount THEN
									SET calculated_amount=annual_max_payment;
								END IF;
							END IF;
						ELSEIF payment_type_id = 9 THEN

                            SELECT max_hours_per_week into var_max_hours_per_week FROM rehab_max_hours_per_week WHERE
                            rehab_max_hours_per_week.contract_id = contract_id AND rehab_max_hours_per_week.start_date <= selected_period_start_date
                            AND rehab_max_hours_per_week.end_date >= selected_period_end_date;

                            SELECT week_count into var_week_count FROM rehab_days_week_calculation WHERE
                            rehab_days_week_calculation.start_date >= selected_period_start_date AND rehab_days_week_calculation.start_date <= selected_period_end_date;

                            SELECT admin_hours into var_admin_hours FROM rehab_admin_hours WHERE
                            rehab_admin_hours.contract_id = contract_id AND rehab_admin_hours.start_date <= selected_period_start_date
                            AND rehab_admin_hours.end_date >= selected_period_end_date;


                            IF var_max_hours_per_week <> 0.00 AND log_hours_sum >= (var_max_hours_per_week * var_week_count) THEN
                                SET calculated_amount = (((var_max_hours_per_week) *(var_week_count)) + var_admin_hours) * (fmv_rate);
                            ELSE
                                SET calculated_amount = (log_hours_sum + var_admin_hours) * (fmv_rate);
                            END IF;

                            IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
                                SET is_remaining_amount = true;
                            ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
                                SET is_remaining_amount = true;
                            END IF;

                            SET remaining_amount = calculated_amount - sum_amount_paid;
                        ELSE
                            SET calculated_amount = fmv_rate * log_hours_sum;
						END IF;


						IF(annual_remaining <> 0) THEN
							IF (sum_amount_paid = 0.00 AND calculated_amount > 0.00) THEN
								SET is_remaining_amount = true;
							ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
								SET is_remaining_amount = true;
							END IF;
							SET remaining_amount = calculated_amount - sum_amount_paid;
						END IF;
					END IF;

				ELSEIF payment_type_id = 5 THEN
						select DAY(agreement_start_date) into agreement_day_of_month;
						

						SET last_day_of_current_month = DAY(LAST_DAY(NOW()));
						IF agreement_day_of_month > last_day_of_current_month THEN
							SET current_period_start_date = last_day_of_current_month;
						ELSE
							SET current_period_start_date = agreement_day_of_month;
						END IF;

						SET current_period_start_date = DATE_FORMAT(NOW() ,concat('%Y-%m','-',current_period_start_date));

					IF DATE_FORMAT(selected_period_start_date, ('%Y-%m-%d')) < current_period_start_date THEN

					SET total_log_count = log_hours_sum;
					truncate temp_contract_rate;
					SET @contract_rate_queryString = CONCAT('INSERT INTO temp_contract_rate
									SELECT rate, range_start_day, range_end_day
									FROM contract_rate
									WHERE contract_id = ',contract_id,'
									-- AND contract_rate.effective_start_date <= "',start_date,'"
									AND contract_rate.effective_start_date <= "',selected_period_start_date,'"
                                    AND contract_rate.effective_end_date >= "',selected_period_start_date,'"
									AND contract_rate.rate_type = "8"
									AND contract_rate.status = "1" ORDER BY `rate_index`  ASC');

					PREPARE contract_rate_query_stmt FROM @contract_rate_queryString;

					EXECUTE contract_rate_query_stmt;
					DEALLOCATE PREPARE contract_rate_query_stmt;

					BLOCK_PAYMENT_TYPE_5: BEGIN
                        DECLARE no_more_contract_rate boolean default FALSE;
                        DECLARE cur_contract_rate cursor for select * from temp_contract_rate;
                        DECLARE continue handler for not found set no_more_contract_rate = TRUE;

                        OPEN cur_contract_rate;
                        REPEAT
                            FETCH cur_contract_rate INTO fmv_rate, start_day, end_day;

                            if not no_more_contract_rate then
								IF total_log_count > 0 THEN
									SET temp_day_count = (end_day - start_day) + 1;

									IF total_log_count < temp_day_count THEN
										SET calculated_amount = calculated_amount + total_log_count * fmv_rate;
									ELSE
										SET calculated_amount = calculated_amount + temp_day_count * fmv_rate;
									END IF;

									SET total_log_count = total_log_count - temp_day_count;
								end if;
							end if;
                        UNTIL no_more_contract_rate END REPEAT;
                        CLOSE cur_contract_rate;




						SET agreement_year_start_date_diff=TIMESTAMPDIFF(MONTH, agreement_start_date, NOW())+1;
						SET agreement_year_start_date_mod=agreement_year_start_date_diff DIV 12;
						SET agreement_interval=CONCAT('INTERVAL ',agreement_year_start_date_mod,' YEAR');
						SET @querystring =CONCAT('SELECT (DATE_ADD("',agreement_start_date,'",', agreement_interval,')) into @agreement_year_start_date');

						PREPARE stmt from @querystring;
								EXECUTE stmt;
								DEALLOCATE PREPARE stmt;

						SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE amount_paid.physician_id = physician_id
						AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
						AND amount_paid.start_date >= @agreement_year_start_date AND amount_paid.end_date <= NOW() limit 1;

						SET remaining_amount = calculated_amount - sum_amount_paid;

						IF (temp_annual_max_payment <> 0) THEN
							IF(sum_amount_paid_cumulative > 0) THEN
								SET per_diem_annual_max_payment = temp_annual_max_payment - sum_amount_paid_cumulative;
							ELSE
								SET per_diem_annual_max_payment = temp_annual_max_payment;
							END IF;

							IF (remaining_amount > per_diem_annual_max_payment) THEN
								SET remaining_amount = per_diem_annual_max_payment;
							END IF;
						END IF;



                        IF (sum_amount_paid = 0.00 AND calculated_amount > 0.00) THEN
                            SET is_remaining_amount = true;
                        ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
                            SET is_remaining_amount = true;
                        END IF;

                    END BLOCK_PAYMENT_TYPE_5;
					END IF;
				ELSE

					SELECT sum(log_hours_calculated * contract_rate) into oncall_calculated_payment from temp_payment_logs where temp_payment_logs.contract_id =  contract_id
					and temp_payment_logs.practice_id = practice_id
					and temp_payment_logs.physician_id = physician_id
					and temp_payment_logs.log_date between selected_period_start_date
					and selected_period_end_date order by temp_payment_logs.log_date ASC;

                    if IsNull(oncall_calculated_payment) then
						set oncall_calculated_payment = 0.00;
					end if;




					SET agreement_year_start_date_diff=TIMESTAMPDIFF(MONTH, agreement_start_date, NOW())+1;
					SET agreement_year_start_date_mod=agreement_year_start_date_diff DIV 12;
				    SET agreement_interval=CONCAT('INTERVAL ',agreement_year_start_date_mod,' YEAR');
                    SET @querystring =CONCAT('SELECT (DATE_ADD("',agreement_start_date,'",', agreement_interval,')) into @agreement_year_start_date');

					PREPARE stmt from @querystring;
                            EXECUTE stmt;
							DEALLOCATE PREPARE stmt;

					SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE amount_paid.physician_id = physician_id
					AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
					AND amount_paid.start_date >= @agreement_year_start_date AND amount_paid.end_date <= NOW() limit 1;

					SET remaining_amount = oncall_calculated_payment - sum_amount_paid;

					IF (temp_annual_max_payment <> 0) THEN
						IF(sum_amount_paid_cumulative > 0) THEN
							SET per_diem_annual_max_payment = temp_annual_max_payment - sum_amount_paid_cumulative;
						ELSE
							SET per_diem_annual_max_payment = temp_annual_max_payment;
						END IF;

						IF (remaining_amount > per_diem_annual_max_payment) THEN
							SET remaining_amount = per_diem_annual_max_payment;
						END IF;
					END IF;




					IF (sum_amount_paid = 0 AND oncall_calculated_payment > 0) THEN
						SET is_remaining_amount = true;
					ELSEIF (sum_amount_paid < oncall_calculated_payment and start_date > deployment_date)  THEN
						SET is_remaining_amount = true;
					ELSE
						SET is_remaining_amount = false;
					END IF;

				END IF;

				END BLOCK_AMOUNT_PAID;

				insert into temp_agreement_payments
				SELECT CONCAT(lower(trim(contract_name)),'-',practice_id,'-',physician_id),
				agreement_id as agreement_id, agreement_name as agreement_name, contract_id as contract_id,
				contract_name_id as contract_name_id,contract_name as contract_name,
				contract_type_id as contract_type_id, payment_type_id as payment_type_id,
				period_number as contract_period, selected_period_start_date as start_date,
				selected_period_end_date as end_date, contract_annual_cap as contract_annual_max_hours,
				contract_min_hours as contract_min_hours, contract_max_hours as contract_max_hours,
				contract_expected_hours as contract_expected_hours, log_hours_sum as worked_hours,
				practice_id as practice_id, practice_name as practice_name,
				is_remaining_amount as is_amount_remaining, ap.amountPaid, ap.id as amount_paid_id,
				physician_id as physician_id, physician_name as physician_name, remaining_amount as remaining_amount,
                annual_max_payment as annual_max_payment, fmv_rate as fmv_rate, ap.final_payment as final_payment,ap.invoice_no as invoice_no
				FROM amount_paid ap
				WHERE ap.physician_id = physician_id
				AND ap.contract_id = contract_id AND ap.practice_id = practice_id
				AND ap.start_date= selected_period_start_date AND ap.end_date= selected_period_end_date;

                select count(*) into check_record_count from temp_agreement_payments tap where tap.contract_id = contract_id and tap.practice_id = practice_id;


                if (check_record_count = 0) then
					insert into temp_agreement_payments
					SELECT CONCAT(lower(trim(contract_name)),'-',practice_id,'-',physician_id),
					agreement_id as agreement_id, agreement_name as agreement_name, contract_id as contract_id,
					contract_name_id as contract_name_id,contract_name as contract_name,
					contract_type_id as contract_type_id, payment_type_id as payment_type_id,
					period_number as contract_period, selected_period_start_date as start_date,
					selected_period_end_date as end_date, contract_annual_cap as contract_annual_max_hours,
					contract_min_hours as contract_min_hours, contract_max_hours as contract_max_hours,
					contract_expected_hours as contract_expected_hours, log_hours_sum as worked_hours,
					practice_id as practice_id, practice_name as practice_name,
					is_remaining_amount as is_amount_remaining, 0, 0,
					physician_id as physician_id, physician_name as physician_name, remaining_amount as remaining_amount,
                    annual_max_payment as annual_max_payment, fmv_rate as fmv_rate, false, '-';
                end if;
			END IF;
		UNTIL no_more_physicians_rows END REPEAT;
		CLOSE cur_contract_practice_physicians;
	END BLOCK_PHYSICIANS;

	SELECT * FROM temp_agreement_payments order by sort_field ASC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_all_agreement_payment_info_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_all_agreement_payment_info_v1`()
BEGIN
    DECLARE agreement_id INT;
	DECLARE agreement_start_date DATETIME;
	DECLARE agreement_end_date DATETIME;
	DECLARE agreement_valid_upto DATETIME;
	DECLARE agreement_hospital_id INT;
	DECLARE agreement_name VARCHAR(35);
	DECLARE term int;
	DECLARE counter int;
	DECLARE start_date DATETIME;
	DECLARE end_date DATETIME;
    DECLARE period_number int;
    DECLARE contract_id int;
    DECLARE contract_name VARCHAR(35);
    DECLARE contract_name_id int;
	DECLARE practice_id int;
    DECLARE practice_name VARCHAR(35);
    DECLARE physician_id int;
    DECLARE physician_name VARCHAR(35);
    DECLARE contract_type_id int;
    DECLARE payment_type_id int;
    DECLARE expected_hours float;
    DECLARE min_hours float;
	DECLARE current_period_end_date DATE;
    DECLARE current_period_start_date DATE;
    DECLARE period_day_of_month INT;
    DECLARE no_more_agreements boolean default false;
	DECLARE start_day int;
	DECLARE end_day int;
	DECLARE total_log_count FLOAT;
	DECLARE temp_day_count int;
	DECLARE temp_annual_max_payment FLOAT;
    DECLARE period_type INT;
	DECLARE payment_frequency_start_date DATETIME;
    DECLARE today DATE;
    DECLARE period_start_date DATE;
    DECLARE period_end_date DATE;
	DECLARE period_count int;
	DECLARE total_days int;
	DECLARE max_hours float;
	DECLARE per_diem_annual_max_payment FLOAT;
	
	DECLARE selected_start_date DATE;
	DECLARE selected_end_date DATE;
	DECLARE temp_payment_frequency_start_date DATETIME;


    DECLARE cur_agreements cursor for select * from temp_agreements;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_agreements = TRUE;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        
        SHOW ERRORS;
    END;





	SET sql_mode='';
	SET @enabled = TRUE;

    
    DROP TEMPORARY TABLE  IF EXISTS `temp_agreements`;
    CREATE TEMPORARY TABLE `temp_agreements`(
		`agreement_id` INT NOT NULL,
        `agreement_name` VARCHAR(35) NOT NULL,
        `agreement_hospital_id` INT NOT NULL,
		`agreement_start_date` DATE NOT NULL,
		`agreement_end_date` DATE NOT NULL,
		`agreement_valid_upto` DATE,
        `period_type` INT NOT NULL,
		`payment_frequency_start_date` DATE NOT NULL
	);

    SET @agreement_querystring = CONCAT('INSERT INTO temp_agreements
									SELECT agreements.id, agreements.name , agreements.hospital_id,
									agreements.start_date, agreements.end_date, agreements.valid_upto, agreements.payment_frequency_type, agreements.payment_frequency_start_date
									FROM agreements
									JOIN hospitals on hospitals.id = agreements.hospital_id
									WHERE hospitals.id = ', hospital_id,
									' AND hospitals.archived = false
									AND IsNull(agreements.deleted_at)
									AND agreements.archived = false;');
	PREPARE agreements_stmt FROM @agreement_querystring;
	EXECUTE agreements_stmt;
	DEALLOCATE PREPARE agreements_stmt;

    
    DROP TEMPORARY TABLE  IF EXISTS `temp_agreement_term_dates`;
    CREATE TEMPORARY TABLE `temp_agreement_term_dates`(
		`agreement_id` INT NOT NULL,
		`period_number` INT NOT NULL,
		`start_date` DATE,
		`end_date` DATE
	);

	
    DROP TEMPORARY TABLE  IF EXISTS `temp_agreement_term_dates_all`;
    CREATE TEMPORARY TABLE `temp_agreement_term_dates_all`(
		`agreement_id` INT NOT NULL,
		`period_number` INT NOT NULL,
		`start_date` DATE,
		`end_date` DATE
	);

    
	DROP TEMPORARY TABLE  IF EXISTS `temp_logs`;
    CREATE TEMPORARY TABLE `temp_logs`(
		`contract_id` INT NOT NULL,
		`practice_id` INT NOT NULL,
		`physician_id` INT NOT NULL,
        `period_number` INT,
        `start_date` DATE,
        `end_date` DATE,
        `action_name` VARCHAR(35),
        `sum_log_hours` DECIMAL(10,2),
		`sum_log_hours_calculated` FLOAT,
        `contract_rate` DECIMAL(10,2),
        `sum_amount_paid` DECIMAL(10,2)
	);

     
    DROP TEMPORARY TABLE  IF EXISTS `temp_remaining_payemnts`;
    CREATE TEMPORARY TABLE `temp_remaining_payemnts`(
        `agreement_id` INT NOT NULL,
        `agreement_name` VARCHAR(35) NULL,
		`contract_id` INT NOT NULL,
        `contract_name_id` INT NOT NULL,
        `contract_name` VARCHAR(35) NOT NULL,
        `payment_type_id` INT NOT NULL,
        `contract_month` VARCHAR(35) NOT NULL,
        `start_date` DATE,
        `end_date` DATE,
        `period_number` INT,
        `is_remaining_amount_flag` boolean default false,
		`payment_type_name` VARCHAR(35) NOT NULL,
		`contract_type_name` VARCHAR(35) NOT NULL,
        `contract_type_id` INT NOT NULL,
		`practice_id` INT NOT NULL,
		`practice_name` VARCHAR(50) NOT NULL,
		`physician_id` INT NOT NULL,
		`physician_name` VARCHAR(35) NOT NULL

	);

    DROP TEMPORARY TABLE  IF EXISTS `temp_agreement_contract_practice_physicians`;
	CREATE TEMPORARY TABLE `temp_agreement_contract_practice_physicians`
	(
		`contract_id` INT NOT NULL,
		`contract_name` VARCHAR(50) NOT NULL,
		`contract_name_id` INT NOT NULL,
		`practice_id` INT NOT NULL,
		`practice_name` VARCHAR(50) NOT NULL,
		`physician_id` INT NOT NULL,
		`physician_name` VARCHAR(35) NOT NULL,
		`contract_type_id` INT NOT NULL,
		`payment_type_id` INT NOT NULL,
		`expected_hour` float NOT NULL default 0.00,
		`min_hour` float NOT NULL default 0.00,
        `max_hour` float NOT NULL default 0.00,
		`payment_type_name` VARCHAR(35) NOT NULL,
		`contract_type_name` VARCHAR(35) NOT NULL,
		`annual_cap` float NOT NULL default 0.00,
		`annual_max_payment` float NOT NULL default 0.00,
		`prior_start_date` DATE NOT NULL,
		`prior_amount_paid` float NOT NULL default 0.00
	);

	
    DROP TEMPORARY TABLE  IF EXISTS `temp_contract_rate`;
    CREATE TEMPORARY TABLE `temp_contract_rate`(
		`contract_rate` DECIMAL(10,2),
		`range_start_day` INT NOT NULL,
        `range_end_day` INT NOT NULL
	);
	
	DROP TEMPORARY TABLE  IF EXISTS `temp_agreement_payments`;
    CREATE TEMPORARY TABLE `temp_agreement_payments`(
        `sort_field` VARCHAR(35),
        `agreement_id` INT NOT NULL,
        `agreement_name` VARCHAR(35) NULL,
		`contract_id` INT NOT NULL,
        `contract_name_id` INT NOT NULL,
        `contract_name` VARCHAR(35) NOT NULL,
        `contract_type_id` INT NOT NULL,
        `payment_type_id` INT NOT NULL,
        `contract_period` VARCHAR(35) NOT NULL,
        `start_date` DATE NOT NULL,
        `end_date` DATE NOT NULL,
        `contract_annual_max_hours` FLOAT NOT NULL,
        `contract_min_hours` FLOAT NOT NULL,
        `contract_max_hours` FLOAT NOT NULL,
        `contract_expected_hours` FLOAT NOT NULL,
		`worked_hours` FLOAT NOT NULL,
        `practice_id` INT NOT NULL,
        `practice_name` VARCHAR(35) NOT NULL,
        `is_amount_remaining` boolean default false,
        `amount_paid` DECIMAL(10,2) NOT NULL,
		`amount_paid_id` INT NOT NULL,
        `physician_id` INT NOT NULL,
        `physician_name` VARCHAR(35) NOT NULL,
        `remaining_amount` DECIMAL(10, 2) NOT NULL,
		`annual_max_payment` DECIMAL(10,2) NOT NULL,
        `fmv_rate` DECIMAL(10,2) NOT NULL,
		`final_payment` boolean default false,
		`invoice_no` VARCHAR(35)
	);



    
    OPEN cur_agreements;

    REPEAT

		FETCH cur_agreements INTO agreement_id, agreement_name, agreement_hospital_id, agreement_start_date,
        agreement_end_date, agreement_valid_upto, period_type, payment_frequency_start_date;

		IF NOT no_more_agreements THEN
            
            truncate `temp_agreement_term_dates`;
			truncate `temp_agreement_contract_practice_physicians`;


		   
            IF period_type = 1 THEN 	
				SELECT DAY(payment_frequency_start_date) into period_day_of_month;
				SELECT DATE_FORMAT(NOW() ,concat('%Y-%m','-',period_day_of_month)) into current_period_start_date;
				SET start_date = DATE_SUB(current_period_start_date,INTERVAL 24 MONTH); 

                SET current_period_end_date = DATE_ADD(current_period_start_date,INTERVAL 1 MONTH);
            ELSEIf period_type = 2 THEN 
				SET period_count = ROUND(DATEDIFF(NOW(), payment_frequency_start_date)/7, 0) - 1;
				SET total_days = period_count * 7;
				SELECT DATE_FORMAT(DATE_ADD(payment_frequency_start_date,INTERVAL total_days DAY),'%Y-%m-%d') into current_period_start_date;
				SET start_date = DATE_SUB(current_period_start_date,INTERVAL 104 WEEK); 

                SET current_period_end_date=DATE_ADD(current_period_start_date,INTERVAL 7 DAY);
            ELSEIf period_type = 3 THEN 	
				SET period_count = ROUND(DATEDIFF(NOW(), payment_frequency_start_date)/14, 0) - 1;
				SET total_days = period_count * 14;
				SELECT DATE_FORMAT(DATE_ADD(payment_frequency_start_date,INTERVAL total_days DAY),'%Y-%m-%d') into current_period_start_date;
				SET start_date = DATE_SUB(current_period_start_date,INTERVAL 104 WEEK); 

				SET current_period_end_date = DATE_ADD(current_period_start_date,INTERVAL 14 DAY);
            ELSEIf period_type = 4 THEN 	
				SELECT DAY(payment_frequency_start_date) into period_day_of_month;
				SELECT DATE_FORMAT(NOW() ,concat('%Y-%m','-',period_day_of_month)) into current_period_start_date;
				SET start_date = DATE_SUB(current_period_start_date,INTERVAL 24 MONTH); 

                SET current_period_end_date=DATE_ADD(current_period_start_date,INTERVAL 3 MONTH);
            END IF;
            SET current_period_end_date=DATE_SUB(current_period_end_date, INTERVAL 1 DAY);

            IF agreement_valid_upto = "0000-00-00" THEN
				SET agreement_valid_upto = current_period_end_date;
			ELSE
                IF agreement_valid_upto > current_period_end_date THEN
                    SET agreement_valid_upto = current_period_end_date;
                END IF;
			END IF;

            IF (start_date < payment_frequency_start_date) THEN
               SET start_date = payment_frequency_start_date;
			
				
            END IF;

			SET selected_end_date = in_end_date;
            
            IF period_type = 1 THEN 
				SET end_date=DATE_ADD(start_date,INTERVAL 1 MONTH);
				SET term = TIMESTAMPDIFF(MONTH, start_date, current_period_start_date); 
            ELSEIf period_type = 2 THEN 
                SET end_date=DATE_ADD(start_date,INTERVAL 7 DAY);
				SET term = ROUND(DATEDIFF(selected_end_date, start_date)/7, 0); 
            ELSEIf period_type = 3 THEN 
                SET end_date=DATE_ADD(start_date,INTERVAL 14 DAY);
				SET term = ROUND(DATEDIFF(selected_end_date, start_date)/14, 0); 
            ELSEIf period_type = 4 THEN 
                SET end_date=DATE_ADD(start_date,INTERVAL 3 MONTH);
				SET term = CEIL(TIMESTAMPDIFF(MONTH, start_date, current_period_start_date) / 3); 
            END IF;

            SET end_date=DATE_SUB(end_date, INTERVAL 1 DAY);

			SET counter=TIMESTAMPDIFF(MONTH, payment_frequency_start_date, start_date);
			
			SET term = term + counter;

            create_contract_period_loop: LOOP
				IF counter < term THEN

					IF(DATE_FORMAT(start_date, '%Y-%m-%d') >= DATE_FORMAT(in_start_date, '%Y-%m-%d') AND DATE_FORMAT(end_date, '%Y-%m-%d') <= DATE_FORMAT(in_end_date, '%Y-%m-%d')) THEN
						
						INSERT INTO  `temp_agreement_term_dates` VALUES(agreement_id, counter +1 , start_date, end_date);
						INSERT INTO  `temp_agreement_term_dates_all` VALUES(agreement_id, counter +1 , start_date, end_date);
					END IF;
					
                    SET start_date=DATE_ADD(end_date, INTERVAL 1 DAY);

                    
                    IF period_type = 1 THEN 
                        SET end_date=DATE_ADD(start_date,INTERVAL 1 MONTH);
                    ELSEIf period_type = 2 THEN 
                        SET end_date=DATE_ADD(start_date,INTERVAL 7 DAY);
                    ELSEIf period_type = 3 THEN 
                        SET end_date=DATE_ADD(start_date,INTERVAL 14 DAY);
                    ELSEIf period_type = 4 THEN 
                        SET end_date=DATE_ADD(start_date,INTERVAL 3 MONTH);
                    END IF;

					SET end_date=DATE_SUB(end_date, INTERVAL 1 DAY);
					SET counter= counter + 1;
				ELSE
					LEAVE create_contract_period_loop;
				END IF;
			END LOOP;

			SET @contracts_queryString = CONCAT('INSERT INTO temp_agreement_contract_practice_physicians
						SELECT c.id, cn.name, c.contract_name_id, c.practice_id, p.name as practice_name,
						c.physician_id , concat(ph.last_name,", ", ph.first_name) as physician_name,
						c.contract_type_id, c.payment_type_id, c.expected_hours, c.min_hours, c.max_hours,
						pt.name, ct.name, c.annual_cap, c.annual_max_payment,
						c.prior_start_date as prior_start_date, c.prior_amount_paid as prior_amount_paid
						FROM contracts c
						JOIN contract_names cn ON c.contract_name_id= cn.id
						JOIN physicians ph ON ph.id = c.physician_id
						JOIN practices p on p.id = c.practice_id
						JOIN payment_types pt on pt.id = c.payment_type_id
						JOIN contract_types ct on ct.id = c.contract_type_id
						WHERE c.agreement_id= ', agreement_id,
						' AND p.hospital_id =',agreement_hospital_id,' AND c.end_date = "0000-00-00 00:00:00"
						and IsNull(c.deleted_at) and IsNull(p.deleted_at) and c.manually_archived = 0');

			IF in_practice_id > 0 THEN
			   SET @contracts_queryString = CONCAT(@contracts_queryString, ' AND p.id = ', in_practice_id);
			END IF;
			
			IF in_payment_type_id > 0 THEN
			   SET @contracts_queryString = CONCAT(@contracts_queryString, ' AND c.payment_type_id = ', in_payment_type_id);
			END IF;
			
			IF in_physician_id > 0 THEN
			   SET @contracts_queryString = CONCAT(@contracts_queryString, ' AND c.physician_id = ', in_physician_id);
			END IF;
			
			IF in_contract_type_id > 0 THEN
			   SET @contracts_queryString = CONCAT(@contracts_queryString, ' AND c.contract_type_id = ', in_contract_type_id);
			END IF;
			
			SET @contracts_queryString = CONCAT(@contracts_queryString,' order by physician_id;');
			
			
			PREPARE contracts_stmt FROM @contracts_queryString;
			EXECUTE contracts_stmt;
			DEALLOCATE PREPARE contracts_stmt;

			BLOCK_TERMDATES: BEGIN
				DECLARE no_more_termdates boolean default false;
				DECLARE cur_agreement_term_dates cursor for select * from temp_agreement_term_dates;
				DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_termdates = TRUE;

				
				OPEN cur_agreement_term_dates;
				REPEAT

					FETCH cur_agreement_term_dates INTO agreement_id, period_number, start_date, end_date;
						
					IF NOT 	no_more_termdates THEN
						BLOCK_PHYSICIANS: BEGIN
							DECLARE temp_log_count int default 0;
							DECLARE calculated_amount decimal(10,2) default 0.00;
							DECLARE sum_amount_paid decimal(10,2) default 0.00;
							DECLARE contract_rate decimal(10,2) default 0.00;
							DECLARE fmv decimal(10,2) default 0.00;
							DECLARE log_hours_sum float default 0.00;
							DECLARE log_hours_sum_cumulataive float default 0.00;
							DECLARE sum_amount_paid_cumulative decimal(10,2) default 0.00;
							DECLARE is_remaining_amount boolean default false;
                            DECLARE payment_type_name VARCHAR(35) default "";
                            DECLARE contract_type_name VARCHAR(35) default "";
                            DECLARE oncall_calculated_payment DECIMAL(10,2) default 0.00;
							DECLARE is_final_payment int default 0;
							DECLARE agreement_year_start_date_mod int default 0;
							DECLARE agreement_year_start_date_diff int default 0;
							DECLARE agreement_interval varchar(30) default null;
							DECLARE contract_annual_cap FLOAT default 0.00;
							DECLARE expected_payment_to_be_paid DECIMAL(10,2) default 0.00;
							DECLARE annual_remaining DECIMAL(10,2) default 0.00;
							DECLARE annual_max_payment DECIMAL(10,2) default 0.00;
							DECLARE prior_start_date date;
							DECLARE prior_amount_paid DECIMAL(10,2) default 0.00;
							DECLARE contract_agreement_start_date DATE;
							DECLARE var_max_hours_per_week DECIMAL(10,2) default 0.00;
							DECLARE var_week_count DECIMAL(10,2) default 0.00;
							DECLARE var_admin_hours DECIMAL(10,2) default 0.00;
							DECLARE remaining_amount DECIMAL(10,2) default 0.00;
							DECLARE check_record_count int default 0;
							DECLARE fmv_rate decimal(10,2) default 0.00;

							DECLARE no_more_physicians_rows boolean default FALSE;

							DECLARE cur_contract_practice_physicians cursor for select * from temp_agreement_contract_practice_physicians;
							DECLARE continue handler for not found set no_more_physicians_rows = TRUE;

							OPEN cur_contract_practice_physicians;
							REPEAT
								FETCH cur_contract_practice_physicians INTO contract_id, contract_name, contract_name_id,
									practice_id, practice_name, physician_id, physician_name, contract_type_id, payment_type_id,
                                    expected_hours, min_hours, max_hours, payment_type_name, contract_type_name, contract_annual_cap, temp_annual_max_payment, prior_start_date, prior_amount_paid;

								TRUNCATE temp_logs;

								IF NOT no_more_physicians_rows THEN
									SET is_final_payment=0;
									SELECT count(id) into is_final_payment FROM amount_paid
									WHERE amount_paid.physician_id = physician_id
									AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
									AND amount_paid.start_date = start_date AND amount_paid.end_date = end_date AND amount_paid.final_payment = '1';
                                    
								    IF payment_type_id <> 3 THEN
                                        SET @logs_queryString = CONCAT('INSERT INTO temp_logs
													SELECT pl.contract_id, pl.practice_id, pl.physician_id, ', period_number, ',"',start_date, '","', end_date, '", "" as action_name, sum(duration), sum(log_hours),
													  (select contract_rate.rate from contract_rate
														where contract_rate.contract_id = pl.contract_id and
														contract_rate.effective_start_date <= "', start_date,
														'" and contract_rate.status = "1"
														and case
														  when Instr(actions.name, "Weekend") > 0 then  contract_rate.rate_type = 6
														  when Instr(actions.name, "Holiday") > 0 then contract_rate.rate_type = 7
														   when Instr(actions.name, "On-Call") > 0 then contract_rate.rate_type = 2
														  when Instr(actions.name, "Called-back") > 0  then contract_rate.rate_type =3
														  when Instr(actions.name, "Called-In") > 0 then contract_rate.rate_type =4
														  when Instr(actions.name, "Weekday") > 0 then contract_rate.rate_type = 5
														  when Instr(actions.name, "On-Call/Uncompensated") > 0 then contract_rate.rate_type = 8
														  else contract_rate.rate_type IN (1, 9)
														  end  order by effective_start_date desc limit 1) as contract_rate,
													(SELECT sum(amountPaid)  FROM amount_paid WHERE amount_paid.physician_id = pl.physician_id
										 		 AND amount_paid.contract_id = pl.contract_id AND amount_paid.practice_id = pl.practice_id
										 		 AND amount_paid.start_date = "', start_date, '" AND amount_paid.end_date= "', end_date, '" limit 1) as amount_paid
													FROM physician_logs pl JOIN actions  on actions.id = pl.action_id
                                                    JOIN actions a on a.id = pl.action_id
													JOIN contracts c on c.id = pl.contract_id
													where pl.contract_id = ', contract_id,
													' and pl.practice_id = ', practice_id,
													' and pl.physician_id = ', physician_id,
													' and IF(c.payment_type_id = 9, actions.category_id, "") !=  "12"'
													' and (pl.approval_date <> "0000-00-00" OR pl.signature <> 0)
													 and pl.date between "', start_date ,
													'" and "', end_date, '" group by pl.contract_id, pl.practice_id, pl.physician_id, action_name;');

										PREPARE logs_query_stmt FROM @logs_queryString;
										EXECUTE logs_query_stmt;
										DEALLOCATE PREPARE logs_query_stmt;

										SELECT COUNT(*) INTO temp_log_count FROM temp_logs;

										SET is_remaining_amount = FALSE;
										SET calculated_amount = 0.00;
										SET remaining_amount = 0.00;

										IF temp_log_count > 0 THEN
											IF	is_final_payment = 0 THEN 
												SELECT tl.sum_log_hours_calculated, tl.contract_rate, tl.sum_amount_paid INTO log_hours_sum, contract_rate, sum_amount_paid FROM temp_logs tl
												WHERE tl.contract_id =  contract_id
												AND tl.practice_id = practice_id
												AND tl.physician_id = physician_id;


												IF IsNull(sum_amount_paid) THEN
													SET sum_amount_paid = 0.00;
												END IF;

												IF IsNull(log_hours_sum) THEN
													SET log_hours_sum = 0.00;
												END IF;

												IF IsNull(contract_rate) THEN
													set contract_rate = 0.00;
												END IF;
												
												IF payment_type_id = 1 OR payment_type_id = 7 THEN
													IF period_number > 1 THEN

														SELECT SUM(duration) INTO log_hours_sum_cumulataive FROM physician_logs WHERE physician_logs.contract_id =  contract_id
														AND physician_logs.practice_id = practice_id
														AND physician_logs.physician_id = physician_id
														AND (physician_logs.approval_date <> "0000-00-00" OR physician_logs.signature <> 0)
														AND physician_logs.date <= end_date ORDER BY physician_logs.date ASC;

														IF IsNull(log_hours_sum_cumulataive) THEN
															SET log_hours_sum_cumulataive = 0.00;
														END IF;

														SELECT SUM(amountPaid) INTO sum_amount_paid_cumulative FROM amount_paid WHERE amount_paid.physician_id = physician_id
														AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
														AND amount_paid.start_date >= start_date AND amount_paid.end_date <= end_date limit 1;

														IF IsNull(sum_amount_paid_cumulative) THEN
															SET sum_amount_paid_cumulative = 0.00;
														END IF;

														IF log_hours_sum_cumulataive > 0 THEN
															SET fmv = sum_amount_paid_cumulative / log_hours_sum_cumulataive;
														ELSE
															SET fmv = sum_amount_paid_cumulative;
														END IF;

														IF (fmv <= contract_rate AND log_hours_sum >= min_hours) THEN
															SET calculated_amount = contract_rate * expected_hours;
															IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
																SET is_remaining_amount = true;
															ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) then
																SET is_remaining_amount = true;
															END IF;
															SET remaining_amount = calculated_amount - sum_amount_paid;
														ELSE
															SET remaining_amount = 0.00;
														END IF;
													ELSE 
														IF (min_hours <= log_hours_sum) THEN
															SET calculated_amount = contract_rate * expected_hours;
															IF (sum_amount_paid = 0.00 AND calculated_amount > 0.00) THEN
																SET is_remaining_amount = true;
																SET remaining_amount = calculated_amount;
															ELSE
																IF ((calculated_amount - sum_amount_paid) > 0.00 and start_date > deployment_date) THEN
																	SET is_remaining_amount = true;
																	SET remaining_amount = calculated_amount - sum_amount_paid;
																END IF;
															END IF;
														ELSE
															SET remaining_amount = 0.00;
														END IF;
													END IF; 
												ELSEIF payment_type_id = 5 THEN
													SET total_log_count = log_hours_sum;
													TRUNCATE temp_contract_rate;
													SET @contract_rate_queryString = CONCAT('INSERT INTO temp_contract_rate
																SELECT rate, range_start_day, range_end_day
																FROM contract_rate
																WHERE contract_id = ',contract_id,'
																AND contract_rate.effective_start_date <= "',start_date,'"
																AND contract_rate.effective_end_date >= "',end_date,'"
																AND contract_rate.rate_type = "8"
																AND contract_rate.status = "1" ORDER BY `rate_index`  ASC');

													PREPARE contract_rate_query_stmt FROM @contract_rate_queryString;

													EXECUTE contract_rate_query_stmt;
													DEALLOCATE PREPARE contract_rate_query_stmt;

													BLOCK_PAYMENT_TYPE_5: BEGIN
														DECLARE no_more_contract_rate boolean default FALSE;
														DECLARE cur_contract_rate cursor for select * from temp_contract_rate;
														DECLARE continue handler for not found set no_more_contract_rate = TRUE;

														OPEN cur_contract_rate;
														REPEAT
															FETCH cur_contract_rate INTO contract_rate, start_day, end_day;

															IF NOT no_more_contract_rate then
																SET temp_day_count = (end_day - start_day) + 1;

																IF total_log_count > 0 THEN

																	IF total_log_count < temp_day_count THEN
																		SET calculated_amount = calculated_amount + total_log_count * contract_rate;
																	ELSE
																		SET calculated_amount = calculated_amount + temp_day_count * contract_rate;
																	END IF;

																	SET total_log_count = total_log_count - temp_day_count;

																END IF;
															END IF;
														UNTIL no_more_contract_rate END REPEAT;
														CLOSE cur_contract_rate;

														IF (sum_amount_paid = 0.00 AND calculated_amount > 0.00) THEN
															SET is_remaining_amount = true;
														ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
															SET is_remaining_amount = true;
														END IF;
														

													

														SET agreement_year_start_date_diff=TIMESTAMPDIFF(MONTH, agreement_start_date, NOW())+1;
														SET agreement_year_start_date_mod=agreement_year_start_date_diff DIV 12;
														SET agreement_interval=CONCAT('INTERVAL ',agreement_year_start_date_mod,' YEAR');
														SET @querystring =CONCAT('SELECT (DATE_ADD("',agreement_start_date,'",', agreement_interval,')) into @agreement_year_start_date');

														PREPARE stmt from @querystring;
														EXECUTE stmt;
														DEALLOCATE PREPARE stmt;

														SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE
														amount_paid.physician_id = physician_id
														AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
														AND amount_paid.start_date >= @agreement_year_start_date AND amount_paid.end_date <= NOW() limit 1;

														SET remaining_amount = calculated_amount - sum_amount_paid;
														
														IF (temp_annual_max_payment <> 0) THEN
															IF(sum_amount_paid_cumulative > 0) THEN
																SET per_diem_annual_max_payment = temp_annual_max_payment - sum_amount_paid_cumulative;
															ELSE
																SET per_diem_annual_max_payment = temp_annual_max_payment;
															END IF;

															IF (remaining_amount > per_diem_annual_max_payment) THEN
																SET remaining_amount = per_diem_annual_max_payment;
															END IF;
														END IF;

														IF (sum_amount_paid_cumulative = temp_annual_max_payment) THEN
															SET is_remaining_amount = false;
														END IF;
													END BLOCK_PAYMENT_TYPE_5;
												ELSEIF payment_type_id = 6 THEN
													IF ( min_hours  <= log_hours_sum) THEN
														SET calculated_amount = contract_rate;
														IF (sum_amount_paid = 0.00 AND calculated_amount > 0.00) THEN
															SET is_remaining_amount = true;
														ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) then
															SET is_remaining_amount = true;
														END IF;
														SET remaining_amount = calculated_amount - sum_amount_paid;
													ELSE
														SET remaining_amount = 0.00;
													END IF;
												ELSEIF payment_type_id = 2 OR payment_type_id = 8 THEN 
													IF(prior_start_date <> '0000-00-00') THEN
														SET contract_agreement_start_date = prior_start_date;
													Else
														SET contract_agreement_start_date = agreement_start_date;
													END IF;
													
													SET agreement_year_start_date_diff=TIMESTAMPDIFF(MONTH, contract_agreement_start_date, start_date);
													SET agreement_year_start_date_mod=agreement_year_start_date_diff DIV 12;
													SET agreement_interval=CONCAT('INTERVAL ',agreement_year_start_date_mod,' YEAR');
													SET @querystring =CONCAT('SELECT (DATE_ADD("',contract_agreement_start_date,'",', agreement_interval,')) into @agreement_year_start_date');

													PREPARE stmt from @querystring;
													EXECUTE stmt;
													DEALLOCATE PREPARE stmt;
														
													SET @agreement_year_end_date=DATE_SUB(DATE_ADD(@agreement_year_start_date, INTERVAL 1 YEAR), INTERVAL 1 DAY);
													
													IF agreement_year_start_date_mod = 0 THEN 
														SET expected_payment_to_be_paid =  (contract_annual_cap * contract_rate) - prior_amount_paid;
													ELSE 
														SET expected_payment_to_be_paid =  contract_annual_cap * contract_rate;
													END IF;

													SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE
													amount_paid.physician_id = physician_id
													AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
													AND amount_paid.start_date >= @agreement_year_start_date AND amount_paid.end_date <= @agreement_year_end_date limit 1;

													IF ISNULL(sum_amount_paid_cumulative) THEN
														SET sum_amount_paid_cumulative = 0.00;
													END IF;
													SET annual_remaining = expected_payment_to_be_paid - sum_amount_paid_cumulative;

													IF annual_remaining <= 0 THEN
														SET annual_max_payment= 0.0;
													ELSE
														SET annual_max_payment=annual_remaining;
													END IF;

													IF ( log_hours_sum  <= max_hours) THEN
														SET calculated_amount = contract_rate * log_hours_sum;
													ELSE
														SET calculated_amount = contract_rate * max_hours;
													END IF;

													IF(annual_max_payment <> 0) THEN
														IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
															SET is_remaining_amount = true;
														ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
															SET is_remaining_amount = true;
														END IF;
														SET remaining_amount = calculated_amount - sum_amount_paid;
													END IF;
												ELSEIF payment_type_id = 9 THEN 
                                                
                                                    SELECT max_hours_per_week into var_max_hours_per_week FROM rehab_max_hours_per_week WHERE 
                                                    rehab_max_hours_per_week.contract_id = contract_id AND rehab_max_hours_per_week.start_date <= start_date
                                                    AND rehab_max_hours_per_week.end_date >= end_date;

                                                    SELECT week_count into var_week_count FROM rehab_days_week_calculation WHERE 
                                                    rehab_days_week_calculation.start_date >= start_date AND rehab_days_week_calculation.start_date <= end_date;

                                                    SELECT admin_hours into var_admin_hours FROM rehab_admin_hours WHERE 
                                                    rehab_admin_hours.contract_id = contract_id AND rehab_admin_hours.start_date <= start_date
                                                    AND rehab_admin_hours.end_date >= end_date;

                                                    IF var_max_hours_per_week <> 0.00 AND log_hours_sum >= var_max_hours_per_week THEN
                                                        SET calculated_amount = (((var_max_hours_per_week) *(var_week_count)) + var_admin_hours) * (contract_rate);
                                                    ELSE
                                                        SET calculated_amount = (log_hours_sum + var_admin_hours) * (contract_rate);
                                                    END IF;

                                                    IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
														SET is_remaining_amount = true;
													ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
														SET is_remaining_amount = true;
													END IF;
													SET remaining_amount = calculated_amount - sum_amount_paid;
												ELSE
													SET calculated_amount = contract_rate * log_hours_sum;
													IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
														SET is_remaining_amount = true;
													ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
														SET is_remaining_amount = true;
													END IF;
													SET remaining_amount = calculated_amount - sum_amount_paid;
												END IF;
											ELSE 
												SET is_remaining_amount = false;
											END IF;
												
											
											
											
											
											
											IF(is_remaining_amount AND start_date >= in_start_date AND end_date <= in_end_date) THEN
												INSERT INTO temp_agreement_payments
												SELECT CONCAT(LOWER(TRIM(contract_name)),'-',practice_id,'-',physician_id), agreement_id as agreement_id, 
												agreement_name as agreement_name, contract_id as contract_id, contract_name_id as contract_name_id, 
												contract_name as contract_name, contract_type_id as contract_type_id, payment_type_id as payment_type_id, 
												period_number as contract_period, start_date as start_date, end_date as end_date, 
												contract_annual_cap as contract_annual_max_hours, min_hours as contract_min_hours, max_hours as contract_max_hours, 
												expected_hours as contract_expected_hours, log_hours_sum as worked_hours, practice_id as practice_id, 
												practice_name as practice_name, is_remaining_amount as is_amount_remaining, ap.amountPaid, ap.id as amount_paid_id, 
												physician_id as physician_id, physician_name as physician_name, remaining_amount as remaining_amount, 
												annual_max_payment as annual_max_payment, contract_rate as fmv_rate, ap.final_payment as final_payment, ap.invoice_no as invoice_no 
												FROM amount_paid ap
												WHERE ap.physician_id = physician_id 
												AND ap.contract_id = contract_id AND ap.practice_id = practice_id 
												AND ap.start_date >= DATE_FORMAT(start_date,'%Y-%m-%d') AND ap.end_date <= DATE_FORMAT(end_date,'%Y-%m-%d');

												SELECT COUNT(*) INTO check_record_count 
												FROM temp_agreement_payments tap 
												WHERE tap.contract_id = contract_id AND tap.practice_id = practice_id AND DATE_FORMAT(start_date,'%Y-%m-%d') AND tap.end_date >= DATE_FORMAT(end_date,'%Y-%m-%d') ;

												IF (check_record_count = 0) THEN
													INSERT INTO temp_agreement_payments
													SELECT CONCAT(LOWER(TRIM(contract_name)),'-',practice_id,'-',physician_id), agreement_id as agreement_id, 
													agreement_name as agreement_name, contract_id as contract_id, contract_name_id as contract_name_id, 
													contract_name as contract_name, contract_type_id as contract_type_id, payment_type_id as payment_type_id, 
													period_number as contract_period, start_date as start_date, end_date as end_date, 
													contract_annual_cap as contract_annual_max_hours, min_hours as contract_min_hours, max_hours as contract_max_hours, 
													expected_hours as contract_expected_hours, log_hours_sum as worked_hours, practice_id as practice_id, 
													practice_name as practice_name, is_remaining_amount as is_amount_remaining, 0, 0, 
													physician_id as physician_id, physician_name as physician_name, remaining_amount as remaining_amount, 
													annual_max_payment as annual_max_payment, contract_rate as fmv_rate, false, '-';
												END IF;
											END IF;
										ELSEIF temp_log_count = 0 THEN
											IF payment_type_id = 6 THEN
												IF is_final_payment = 0 THEN 
													SELECT sum(amountPaid) into sum_amount_paid FROM amount_paid WHERE amount_paid.physician_id = physician_id
													AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
													AND amount_paid.start_date >= start_date AND amount_paid.end_date <= end_date limit 1;

													SELECT cr.rate INTO contract_rate FROM contract_rate cr
													WHERE cr.contract_id = contract_id AND
													cr.effective_start_date <= start_date
													AND cr.status = "1"
													AND cr.rate_type = 9
													ORDER BY cr.effective_start_date DESC limit 1;

													IF IsNull(sum_amount_paid) THEN
														SET sum_amount_paid = 0.00;
													END IF;

													SET log_hours_sum = 0.00;
													
													IF IsNull(contract_rate) THEN
														SET contract_rate = 0.00;
													END IF;
													
													IF ( min_hours  <= log_hours_sum ) THEN
														SET calculated_amount = contract_rate;
														IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
															SET is_remaining_amount = true;
														ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) then
															SET is_remaining_amount = true;
														END IF;
														SET remaining_amount = calculated_amount - sum_amount_paid;
													END IF;
												ELSE 
													SET  is_remaining_amount = false;
												END IF;
												
												
												
												
												
												
												IF(is_remaining_amount AND start_date >= in_start_date AND end_date <= in_end_date) THEN
													INSERT INTO temp_agreement_payments
													SELECT CONCAT(LOWER(TRIM(contract_name)),'-',practice_id,'-',physician_id), agreement_id as agreement_id, 
													agreement_name as agreement_name, contract_id as contract_id, contract_name_id as contract_name_id, 
													contract_name as contract_name, contract_type_id as contract_type_id, payment_type_id as payment_type_id, 
													period_number as contract_period, start_date as start_date, end_date as end_date, 
													contract_annual_cap as contract_annual_max_hours, min_hours as contract_min_hours, max_hours as contract_max_hours, 
													expected_hours as contract_expected_hours, log_hours_sum as worked_hours, practice_id as practice_id, 
													practice_name as practice_name, is_remaining_amount as is_amount_remaining, ap.amountPaid, ap.id as amount_paid_id, 
													physician_id as physician_id, physician_name as physician_name, remaining_amount as remaining_amount, 
													annual_max_payment as annual_max_payment, contract_rate as fmv_rate, ap.final_payment as final_payment, ap.invoice_no as invoice_no 
													FROM amount_paid ap
													WHERE ap.physician_id = physician_id 
													AND ap.contract_id = contract_id AND ap.practice_id = practice_id 
													AND ap.start_date = start_date AND ap.end_date = end_date;
													
													SELECT COUNT(*) INTO check_record_count FROM temp_agreement_payments tap WHERE tap.contract_id = contract_id AND tap.practice_id = practice_id;

													IF (check_record_count = 0) THEN
														INSERT INTO temp_agreement_payments
														SELECT CONCAT(LOWER(TRIM(contract_name)),'-',practice_id,'-',physician_id), agreement_id as agreement_id, 
														agreement_name as agreement_name, contract_id as contract_id, contract_name_id as contract_name_id, 
														contract_name as contract_name, contract_type_id as contract_type_id, payment_type_id as payment_type_id, 
														period_number as contract_period, start_date as start_date, end_date as end_date, 
														contract_annual_cap as contract_annual_max_hours, min_hours as contract_min_hours, max_hours as contract_max_hours, 
														expected_hours as contract_expected_hours, log_hours_sum as worked_hours, practice_id as practice_id, 
														practice_name as practice_name, is_remaining_amount as is_amount_remaining, 0, 0, 
														physician_id as physician_id, physician_name as physician_name, remaining_amount as remaining_amount, 
														annual_max_payment as annual_max_payment, contract_rate as fmv_rate, false, '-';
													END IF;
												END IF;
												
											END IF;
										END IF;  
									ELSE 
                                        SET @logs_queryString = CONCAT('INSERT INTO temp_logs
													SELECT pl.contract_id, pl.practice_id, pl.physician_id, ', period_number, ',"',start_date, '","', end_date, '", a.name as action_name, sum(duration), sum(log_hours),
													  (select contract_rate.rate from contract_rate
														where contract_rate.contract_id = pl.contract_id and
														contract_rate.effective_start_date <= "', start_date,
														'" and contract_rate.status = "1"
														and case
														  when Instr(actions.name, "Weekend") > 0 then  contract_rate.rate_type = 6
														  when Instr(actions.name, "Holiday") > 0 then contract_rate.rate_type = 7
														   when Instr(actions.name, "On-Call") > 0 then contract_rate.rate_type = 2
														  when Instr(actions.name, "Called-back") > 0  then contract_rate.rate_type =3
														  when Instr(actions.name, "Called-In") > 0 then contract_rate.rate_type =4
														  when Instr(actions.name, "Weekday") > 0 then contract_rate.rate_type = 5
														  else contract_rate.rate_type IN (1, 9)
														  end  order by effective_start_date desc limit 1) as contract_rate,
													(SELECT sum(amountPaid)  FROM amount_paid WHERE amount_paid.physician_id = pl.physician_id
										 		 AND amount_paid.contract_id = pl.contract_id AND amount_paid.practice_id = pl.practice_id
										 		 AND amount_paid.start_date = "', start_date, '" AND amount_paid.end_date= "', end_date, '" limit 1) as amount_paid
													FROM physician_logs pl JOIN actions  on actions.id = pl.action_id
                                                    JOIN actions a on a.id = pl.action_id
													where pl.contract_id = ', contract_id,
													' and pl.practice_id = ', practice_id,
													' and pl.physician_id = ', physician_id,
													' and (pl.approval_date <> "0000-00-00" OR pl.signature <> 0)
													 and pl.date between "', start_date ,
													'" and "', end_date, '" group by pl.contract_id, pl.practice_id, pl.physician_id, action_name;');

										PREPARE logs_query_stmt FROM @logs_queryString;
										EXECUTE logs_query_stmt;
										DEALLOCATE PREPARE logs_query_stmt;

                                        SELECT COUNT(*) INTO temp_log_count FROM temp_logs;

										SET is_remaining_amount = false;
                                        SET oncall_calculated_payment = 0.00;
										SET remaining_amount = 0.00;

										IF temp_log_count > 0 THEN
											IF is_final_payment = 0 THEN 
												SELECT sum(temp_logs.sum_log_hours_calculated*temp_logs.contract_rate) INTO oncall_calculated_payment FROM temp_logs
												WHERE temp_logs.contract_id =  contract_id
												AND temp_logs.practice_id = practice_id
												AND temp_logs.physician_id = physician_id;
												
												SELECT tl.sum_log_hours_calculated, tl.contract_rate, tl.sum_amount_paid INTO log_hours_sum, contract_rate, sum_amount_paid FROM temp_logs tl
												WHERE tl.contract_id =  contract_id
												AND tl.practice_id = practice_id
												AND tl.physician_id = physician_id LIMIT 1;

												

												IF ISNULL(oncall_calculated_payment) THEN
													SET oncall_calculated_payment = 0.00;
												END IF;
												
												IF ISNULL(sum_amount_paid) THEN
													set sum_amount_paid = 0.00;
												END IF;

												IF (sum_amount_paid = 0 AND oncall_calculated_payment > 0) THEN
													SET is_remaining_amount = true;
												 ELSEIF (sum_amount_paid < oncall_calculated_payment AND start_date > deployment_date)  THEN
													SET is_remaining_amount = true;
												ELSE
													SET is_remaining_amount = false;
												END IF;

												SET agreement_year_start_date_diff=TIMESTAMPDIFF(MONTH, agreement_start_date, NOW())+1;
												SET agreement_year_start_date_mod=agreement_year_start_date_diff DIV 12;
												SET agreement_interval=CONCAT('INTERVAL ',agreement_year_start_date_mod,' YEAR');
												SET @querystring =CONCAT('SELECT (DATE_ADD("',agreement_start_date,'",', agreement_interval,')) into @agreement_year_start_date');

												PREPARE stmt from @querystring;
												EXECUTE stmt;
												DEALLOCATE PREPARE stmt;

												SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE
												amount_paid.physician_id = physician_id
												AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
												AND amount_paid.start_date >= @agreement_year_start_date AND amount_paid.end_date <= NOW() limit 1;
												
												SET remaining_amount = oncall_calculated_payment - sum_amount_paid;

												IF (temp_annual_max_payment <> 0) THEN
													IF(sum_amount_paid_cumulative > 0) THEN
														SET per_diem_annual_max_payment = temp_annual_max_payment - sum_amount_paid_cumulative;
													ELSE
														SET per_diem_annual_max_payment = temp_annual_max_payment;
													END IF;

													IF (remaining_amount > per_diem_annual_max_payment) THEN
														SET remaining_amount = per_diem_annual_max_payment;
													END IF;
												END IF;

												IF (sum_amount_paid_cumulative = temp_annual_max_payment) THEN
													SET is_remaining_amount = false;
												END IF;
											ELSE 
												SET is_remaining_amount = false;
											END IF;
											
											
											
											
											
											
											IF(is_remaining_amount AND start_date >= in_start_date AND end_date <= in_end_date) THEN
												INSERT INTO temp_agreement_payments
												SELECT CONCAT(LOWER(TRIM(contract_name)),'-',practice_id,'-',physician_id), agreement_id as agreement_id, 
												agreement_name as agreement_name, contract_id as contract_id, contract_name_id as contract_name_id, 
												contract_name as contract_name, contract_type_id as contract_type_id, payment_type_id as payment_type_id, 
												period_number as contract_period, start_date as start_date, end_date as end_date, 
												contract_annual_cap as contract_annual_max_hours, min_hours as contract_min_hours, max_hours as contract_max_hours, 
												expected_hours as contract_expected_hours, log_hours_sum as worked_hours, practice_id as practice_id, 
												practice_name as practice_name, is_remaining_amount as is_amount_remaining, ap.amountPaid, ap.id as amount_paid_id, 
												physician_id as physician_id, physician_name as physician_name, remaining_amount as remaining_amount, 
												annual_max_payment as annual_max_payment, contract_rate as fmv_rate, ap.final_payment as final_payment, ap.invoice_no as invoice_no 
												FROM amount_paid ap
												WHERE ap.physician_id = physician_id 
												AND ap.contract_id = contract_id AND ap.practice_id = practice_id 
												AND ap.start_date = start_date AND ap.end_date = end_date;
												
												SELECT COUNT(*) INTO check_record_count FROM temp_agreement_payments tap WHERE tap.contract_id = contract_id AND tap.practice_id = practice_id;

												IF (check_record_count = 0) THEN
													INSERT INTO temp_agreement_payments
													SELECT CONCAT(LOWER(TRIM(contract_name)),'-',practice_id,'-',physician_id), agreement_id as agreement_id, 
													agreement_name as agreement_name, contract_id as contract_id, contract_name_id as contract_name_id, 
													contract_name as contract_name, contract_type_id as contract_type_id, payment_type_id as payment_type_id, 
													period_number as contract_period, start_date as start_date, end_date as end_date, 
													contract_annual_cap as contract_annual_max_hours, min_hours as contract_min_hours, max_hours as contract_max_hours, 
													expected_hours as contract_expected_hours, log_hours_sum as worked_hours, practice_id as practice_id, 
													practice_name as practice_name, is_remaining_amount as is_amount_remaining, 0, 0, 
													physician_id as physician_id, physician_name as physician_name, remaining_amount as remaining_amount, 
													annual_max_payment as annual_max_payment, contract_rate as fmv_rate, false, '-';
												END IF;
											END IF;
									    END IF; 
                                    END IF; 

								END IF;
							UNTIL no_more_physicians_rows END REPEAT;
							CLOSE cur_contract_practice_physicians;
						END BLOCK_PHYSICIANS; 
					END IF; 
				UNTIL no_more_termdates END REPEAT;
				CLOSE cur_agreement_term_dates;
			END BLOCK_TERMDATES;

		END IF; 
	UNTIL no_more_agreements END REPEAT;
    CLOSE cur_agreements;

    
	
	SELECT * FROM temp_agreement_payments order by start_date, contract_name_id, practice_id, physician_id, contract_id ASC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_contracts_updated_by_hospital_based_userid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_contracts_updated_by_hospital_based_userid`(
	IN `AUserID` INT,
	IN `APeriod` INT
)
BEGIN

SELECT `contracts`.`id` AS `id`, `contracts`.`updated_at` AS `updated_at`, `Agreements`.`name` AS `Agreements__name`, `Contract Names`.`name` AS `Contract Names__name`, `Hospitals`.`id` AS `Hospitals__id`, `Hospitals`.`name` AS `Hospitals__name`, `Physicians`.`first_name` AS `Physicians__first_name`, `Physicians`.`last_name` AS `Physicians__last_name`
FROM `contracts`
LEFT JOIN `agreements` `Agreements` ON `contracts`.`agreement_id` = `Agreements`.`id` LEFT JOIN `contract_names` `Contract Names` ON `contracts`.`contract_name_id` = `Contract Names`.`id` LEFT JOIN `hospitals` `Hospitals` ON `Agreements`.`hospital_id` = `Hospitals`.`id` LEFT JOIN `contract_types` `Contract Types` ON `contracts`.`contract_type_id` = `Contract Types`.`id` LEFT JOIN `hospital_user` `Hospital User` ON `Hospitals`.`id` = `Hospital User`.`hospital_id` LEFT JOIN `physicians` `Physicians` ON `contracts`.`physician_id` = `Physicians`.`id`
WHERE (`contracts`.`updated_at` >= date(date_add(now(6), INTERVAL -APeriod day))
   AND `contracts`.`updated_at` < date(date_add(now(6), INTERVAL 1 day)) AND `Hospital User`.`user_id` = AUserID)
LIMIT 2000;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_fix_nextapprover_is_zero_issue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_fix_nextapprover_is_zero_issue`()
BEGIN


    declare contract_id INT;
    declare level1_approver_id INT;
    declare contract_ids VARCHAR(1024);
    declare agreement_id INT;
    declare no_more_erroneous_contracts boolean default false;


    DECLARE cur_erroneous_contracts cursor for select * from temp_erroneous_contract_ids;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_erroneous_contracts = TRUE;

    set sql_mode ='';
    set contract_ids = concat('(', replace(contracts_list, ',', '),('),')');

    
    
    DROP TEMPORARY TABLE  IF EXISTS `temp_erroneous_contract_ids`;
    CREATE TEMPORARY TABLE `temp_erroneous_contract_ids`(`contract_id` INT NOT NULL);

    DROP TEMPORARY TABLE  IF EXISTS `temp_bad_logs`;
    CREATE TEMPORARY TABLE `temp_bad_logs`(
        `contract_id` INT NOT NULL,
        `log_id` INT NOT NULL);

    
  SET @insert_bad_contracts_sql = CONCAT(' insert into temp_erroneous_contract_ids (contract_id) ',
        'values ', contract_ids,  ';');
  PREPARE stmt FROM @insert_bad_contracts_sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

  select * from temp_erroneous_contract_ids;

    

    open cur_erroneous_contracts;

    repeat
        set contract_id = 0;
        set agreement_id = 0;
        set level1_approver_id = 0;
        truncate temp_bad_logs;
        fetch cur_erroneous_contracts into contract_id;

        if contract_id > 0 then
            
            select c.agreement_id
            into agreement_id
            from contracts c where c.id = contract_id;

            
            
            
            
            
            select apmi.user_id into level1_approver_id from agreement_approval_managers_info apmi where
            (apmi.contract_id = contract_id or apmi.contract_id = 0)
            and apmi.agreement_id = agreement_id and apmi.level = 1 and apmi.is_deleted = '0' order by apmi.contract_id desc limit 1;

            

            SET @bad_logs_queryString = CONCAT('INSERT INTO temp_bad_logs
                                            select contract_id, id from physician_logs pl where contract_id = ', contract_id ,
                       ' and pl.next_approver_level = 0 and next_approver_user = 0 and pl.approval_date = "0000-00-00"
                        and pl.date between "2021-10-01" and "2022-02-28" and deleted_at is null
                        order by  id asc;');

            PREPARE bad_logs_stmt FROM @bad_logs_queryString;
            EXECUTE bad_logs_stmt;
            DEALLOCATE PREPARE bad_logs_stmt;

            select * from temp_bad_logs;

            block_bad_logs:
            begin
                DECLARE no_more_bad_logs_for_contract boolean default false;
                DECLARE bad_log_contract_id INT;
                DECLARE bad_log_log_id INT;
                DECLARE bad_log_next_approver_level INT;
                DECLARE bad_log_next_approver_user_id INT;
                DECLARE bad_log_signature_id INT;
                DECLARE cur_bad_logs cursor for select * from temp_bad_logs;
                DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_bad_logs_for_contract = TRUE;

                open cur_bad_logs;
                repeat
                    fetch cur_bad_logs into bad_log_contract_id, bad_log_log_id;

                    select next_approver_user,
                        next_approver_level, signature into
                            bad_log_next_approver_user_id, bad_log_next_approver_level, bad_log_signature_id
                    from physician_logs where id = bad_log_log_id;
                    
                    
                    if (bad_log_next_approver_level = 0 and bad_log_next_approver_user_id = 0 and bad_log_signature_id = 0 and level1_approver_id > 0) then
                        update physician_logs set next_approver_level = 1, next_approver_user = level1_approver_id
                        where id = bad_log_log_id;
                         
                            
                    end if;
                until no_more_bad_logs_for_contract end repeat;
                close cur_bad_logs;

            end block_bad_logs;


        end if; 

    until no_more_erroneous_contracts end repeat;
    close cur_erroneous_contracts;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_fix_same_level_approver_record` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_fix_same_level_approver_record`()
BEGIN

    set sql_mode = '';

    BLOCK_FIX_LOGS:
    begin
        declare contract_id INT;
        declare agreement_id INT;
        declare log_id INT;
        declare max_approver_level INT;
        declare max_approver_id INT;
        declare approval_log_max_level INT;
        declare next_approver_level INT;
        declare next_approver_id INT;
        declare next_approver_count INT;

        declare no_more_erroneous_logs boolean default false;




        DECLARE cur_erroneous_logs cursor for select pl.id, pl.contract_id, pl.next_approver_level, la_derived.max_approver_id from physician_logs pl inner join
          (select la.log_id as log_id, la.user_id as max_approver_id, la.approval_managers_level as next_approver_level, la.created_at as created_at, la.updated_at as updated_at from log_approval la where
         approval_managers_level
         = (select max(approval_managers_level) from log_approval la1 where la1.approval_status = '1' and la1.log_id = la.log_id)) as la_derived
        on pl.id = la_derived.log_id where pl.next_approver_user = la_derived.max_approver_id and pl.next_approver_level = la_derived.next_approver_level
          and FIND_IN_SET(pl.contract_id, contracts_list) > 0
          and pl.signature = 0 and pl.approval_date = '0000-00-00'
          and pl.deleted_at is null
        and pl.next_approver_level > 0 order by pl.contract_id desc;

        DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_erroneous_logs = TRUE;

        select contracts_list;



         open cur_erroneous_logs;

            repeat
                set contract_id = 0;
                set agreement_id = 0;

                fetch cur_erroneous_logs into log_id, contract_id, max_approver_level, max_approver_id;

                select log_id, contract_id, max_approver_level, max_approver_id;

                if contract_id > 0 and log_id > 0 then
                    
                    select c.agreement_id
                    into agreement_id
                    from contracts c where c.id = contract_id;

                    
                    set next_approver_level = max_approver_level + 1;

                    
                    select count(*) into next_approver_count from agreement_approval_managers_info apmi where
                    (apmi.contract_id = contract_id or apmi.contract_id = 0)
                    and apmi.agreement_id = agreement_id and apmi.level = next_approver_level
                    and apmi.is_deleted = '0' order by apmi.contract_id desc limit 1;

                    if next_approver_count > 0 then
                        
                        
                        select apmi.user_id into next_approver_id from agreement_approval_managers_info apmi where
                        (apmi.contract_id = contract_id or apmi.contract_id = 0)
                        and apmi.agreement_id = agreement_id and apmi.level = next_approver_level
                        and apmi.is_deleted = '0' order by apmi.contract_id desc limit 1;

                       if (next_approver_id <> max_approver_id) then
                           
                           update physician_logs set next_approver_level = next_approver_level,
                             next_approver_user = next_approver_id, updated_at = now()
                           where id = log_id;
                       end if;
                    end if;

            end if; 

        until no_more_erroneous_logs end repeat;
        close cur_erroneous_logs;
    end;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_fix_zero_level_approver_record` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_fix_zero_level_approver_record`()
BEGIN


    declare contract_id INT;
    declare contract_ids VARCHAR(1024);
    declare agreement_id INT;
    declare no_more_erroneous_contracts boolean default false;


    DECLARE cur_erroneous_contracts cursor for select * from temp_erroneous_contract_ids;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_erroneous_contracts = TRUE;

    set sql_mode ='';
    set contract_ids = concat('(', replace(contracts_list, ',', '),('),')');

    
    
    DROP TEMPORARY TABLE  IF EXISTS `temp_erroneous_contract_ids`;
    CREATE TEMPORARY TABLE `temp_erroneous_contract_ids`(`contract_id` INT NOT NULL);

    DROP TEMPORARY TABLE  IF EXISTS `temp_bad_log_ids`;
    CREATE TEMPORARY TABLE `temp_bad_log_ids`(`bad_log_id` INT NOT NULL );

    DROP TEMPORARY TABLE  IF EXISTS `temp_bad_log_approvals`;
    CREATE TEMPORARY TABLE `temp_bad_log_approvals`(
        `contract_id` INT NOT NULL,
        `log_approval_id` INT NOT NULL,
        `log_id` INT NOT NULL,
        `user_id` INT NOT NULL,
        `approval_managers_level` INT NOT NULL,
        `approval_date` date not null,
        `signature_id` int not null,
        `signature_time_zone` varchar(100) not null,
        `created_at` timestamp not null);

    DROP TEMPORARY TABLE  IF EXISTS `temp_approval_level_info`;
    CREATE TEMPORARY TABLE `temp_approval_level_info`(
        `user_id` INT NOT NULL,
        `approval_managers_level` INT NOT NULL);

    
  SET @insert_bad_contracts_sql = CONCAT(' insert into temp_erroneous_contract_ids (contract_id) ',
        'values ', contract_ids,  ';');
  PREPARE stmt FROM @insert_bad_contracts_sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

  

    open cur_erroneous_contracts;

    repeat
        set contract_id = 0;
        set agreement_id = 0;

        fetch cur_erroneous_contracts into contract_id;

        if contract_id > 0 then
            
            select c.agreement_id
            into agreement_id
            from contracts c where c.id = contract_id;

            
            truncate temp_bad_log_ids;
            SET @insert_bad_logs = concat('insert into temp_bad_log_ids select distinct la.log_id from log_approval la, physician_logs pl
                                           where pl.contract_id = ',contract_id, ' and la.log_id = pl.id and pl.deleted_at is null
                                           and la.approval_managers_level = 0 and la.role > 1 and la.approval_status = 1  order by la.log_id desc ');

            

            PREPARE insert_bad_logs FROM @insert_bad_logs;
            EXECUTE insert_bad_logs;
            DEALLOCATE PREPARE insert_bad_logs;

            select * from temp_bad_log_ids;

            BLOCK_BAD_LOGS:
            begin
                    declare no_more_bad_logs boolean default false;
                    declare bad_log_id INT;
                    declare max_approval_level int;
                    declare max_approvers_count int;
                    declare count_bad_log_approvals_entries int;
                    declare max_level_approver_id int;
                    declare max_approver_signature_id int;
                    declare max_level_approver_level int;
                    declare max_level_approver_level_again int;
                    declare max_level_approver_timezone varchar(100);
                    declare max_level_approver_approval_date date;

                    DECLARE cur_bad_logs cursor for select * from temp_bad_log_ids;
                    DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_bad_logs = TRUE;

                    open cur_bad_logs;

                    repeat
                        fetch cur_bad_logs into bad_log_id;

                        if  not no_more_bad_logs then

                           

                            truncate temp_bad_log_approvals;
                            SET @insert_bad_approval_logs = concat('insert into temp_bad_log_approvals select ', contract_id, ' ,la.id, ', bad_log_id,
                                                                ' , la.user_id, la.approval_managers_level, la.approval_date, la.signature_id, la.signatureTimeZone, la.created_at
                                                                from log_approval la where la.log_id = ', bad_log_id, ' and la.role > 1 order by la.approval_date;');

                            
                            PREPARE insert_bad_approval_logs FROM @insert_bad_approval_logs;
                            EXECUTE insert_bad_approval_logs;
                            DEALLOCATE PREPARE insert_bad_approval_logs;

                            select count(*) into count_bad_log_approvals_entries from temp_bad_log_approvals;
                            if (count_bad_log_approvals_entries > 0) then
                                

                                select max(approval_managers_level) into max_approval_level from temp_bad_log_approvals;
                                set max_approval_level = max_approval_level + 1;

                                 select count(*) into max_approvers_count from agreement_approval_managers_info apmi where
                                (apmi.contract_id = contract_id or apmi.contract_id = 0)
                                and apmi.agreement_id = agreement_id and apmi.level = max_approval_level and apmi.is_deleted = '0';

                                if max_approvers_count > 0 then
                                       
                                       
                                       select apmi.user_id into max_level_approver_id from agreement_approval_managers_info apmi where
                                        (apmi.contract_id = contract_id or apmi.contract_id = 0)
                                        and apmi.agreement_id = agreement_id and apmi.level = max_approval_level and apmi.is_deleted = '0' order by apmi.contract_id desc limit 1;

                                       update physician_logs pl set pl.next_approver_level = max_approval_level, pl.next_approver_user = max_level_approver_id
                                        where pl.id = bad_log_id;
                                else
                                     select max(approval_managers_level) into max_level_approver_level_again from temp_bad_log_approvals;
                                     select tbla.user_id , tbla.signature_id, tbla.signature_time_zone, tbla.approval_managers_level, tbla.approval_date
                                     into max_level_approver_id,  max_approver_signature_id, max_level_approver_timezone, max_level_approver_level, max_level_approver_approval_date
                                     from temp_bad_log_approvals tbla where
                                         tbla.approval_managers_level = max_level_approver_level_again;

                                     update physician_logs pl set pl.next_approver_level = 0, pl.next_approver_user = 0,
                                         pl.signature = max_approver_signature_id, pl.signatureTimeZone = max_level_approver_timezone,
                                         pl.approval_date = max_level_approver_approval_date
                                    where pl.id = bad_log_id;
                                end if;

                               
                               delete from log_approval where log_approval.id in
                                 (select log_approval_id from temp_bad_log_approvals where approval_managers_level =0);
                            end if;

                        end if;  
                    until no_more_bad_logs end repeat;
                    close cur_bad_logs;
            end;

        end if; 

    until no_more_erroneous_contracts end repeat;
    close cur_erroneous_contracts;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_hospital_payment_require_info_v6` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_hospital_payment_require_info_v6`(
	IN `hospital_id` int,
	IN `deployment_date` date
)
BEGIN
	
	
	
    DECLARE agreement_id INT;
	DECLARE agreement_start_date DATETIME;
	DECLARE agreement_end_date DATETIME;
	DECLARE agreement_valid_upto DATETIME;
	DECLARE agreement_hospital_id INT;
	DECLARE agreement_name VARCHAR(35);
	DECLARE term int;
	DECLARE counter int;
	DECLARE start_date DATETIME;
	DECLARE end_date DATETIME;
    DECLARE period_number int;
    DECLARE contract_id int;
    DECLARE contract_name VARCHAR(35);
    DECLARE contract_name_id int;
	DECLARE practice_id int;
    DECLARE practice_name VARCHAR(35);
    DECLARE physician_id int;
    DECLARE physician_name VARCHAR(35);
    DECLARE contract_type_id int;
    DECLARE payment_type_id int;
    DECLARE expected_hours float;
    DECLARE min_hours float;
	DECLARE current_period_end_date DATE;
    DECLARE current_period_start_date DATE;
    DECLARE period_day_of_month INT;
    DECLARE no_more_agreements boolean default false;
	DECLARE start_day int;
	DECLARE end_day int;
	DECLARE total_log_count FLOAT;
	DECLARE temp_day_count int;
	DECLARE temp_annual_max_payment FLOAT;
    DECLARE period_type INT;
	DECLARE payment_frequency_start_date DATETIME;
    DECLARE today DATE;
    DECLARE period_start_date DATE;
    DECLARE period_end_date DATE;
	DECLARE period_count int;
	DECLARE total_days int;
	DECLARE max_hours float;


    DECLARE cur_agreements cursor for select * from temp_agreements;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_agreements = TRUE;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        
        SHOW ERRORS;
    END;





	SET sql_mode='';
	SET @enabled = TRUE;

    
    DROP TEMPORARY TABLE  IF EXISTS `temp_agreements`;
    CREATE TEMPORARY TABLE `temp_agreements`(
		`agreement_id` INT NOT NULL,
        `agreement_name` VARCHAR(35) NOT NULL,
        `agreement_hospital_id` INT NOT NULL,
		`agreement_start_date` DATE NOT NULL,
		`agreement_end_date` DATE NOT NULL,
		`agreement_valid_upto` DATE,
        `period_type` INT NOT NULL,
		`payment_frequency_start_date` DATE NOT NULL
	);

    SET @agreement_querystring = CONCAT('INSERT INTO temp_agreements
									SELECT agreements.id, agreements.name , agreements.hospital_id,
									agreements.start_date, agreements.end_date, agreements.valid_upto, agreements.payment_frequency_type, agreements.payment_frequency_start_date
									FROM agreements
									JOIN hospitals on hospitals.id = agreements.hospital_id
									WHERE hospitals.id = ', hospital_id,
									' AND hospitals.archived = false
									AND IsNull(agreements.deleted_at)
									AND agreements.archived = false;');
	PREPARE agreements_stmt FROM @agreement_querystring;
	EXECUTE agreements_stmt;
	DEALLOCATE PREPARE agreements_stmt;

    
    DROP TEMPORARY TABLE  IF EXISTS `temp_agreement_term_dates`;
    CREATE TEMPORARY TABLE `temp_agreement_term_dates`(
		`agreement_id` INT NOT NULL,
		`period_number` INT NOT NULL,
		`start_date` DATE,
		`end_date` DATE
	);

	
    DROP TEMPORARY TABLE  IF EXISTS `temp_agreement_term_dates_all`;
    CREATE TEMPORARY TABLE `temp_agreement_term_dates_all`(
		`agreement_id` INT NOT NULL,
		`period_number` INT NOT NULL,
		`start_date` DATE,
		`end_date` DATE
	);

    
	DROP TEMPORARY TABLE  IF EXISTS `temp_logs`;
    CREATE TEMPORARY TABLE `temp_logs`(
		`contract_id` INT NOT NULL,
		`practice_id` INT NOT NULL,
		`physician_id` INT NOT NULL,
        `period_number` INT,
        `start_date` DATE,
        `end_date` DATE,
        `action_name` VARCHAR(35),
        `sum_log_hours` DECIMAL(10,2),
		`sum_log_hours_calculated` FLOAT,
        `contract_rate` DECIMAL(10,2),
        `sum_amount_paid` DECIMAL(10,2)
	);

     
    DROP TEMPORARY TABLE  IF EXISTS `temp_remaining_payemnts`;
    CREATE TEMPORARY TABLE `temp_remaining_payemnts`(
        `agreement_id` INT NOT NULL,
        `agreement_name` VARCHAR(35) NULL,
		`contract_id` INT NOT NULL,
        `contract_name_id` INT NOT NULL,
        `contract_name` VARCHAR(35) NOT NULL,
        `payment_type_id` INT NOT NULL,
        `contract_month` VARCHAR(35) NOT NULL,
        `start_date` DATE,
        `end_date` DATE,
        `period_number` INT,
        `is_remaining_amount_flag` boolean default false,
		`payment_type_name` VARCHAR(35) NOT NULL,
		`contract_type_name` VARCHAR(35) NOT NULL,
        `contract_type_id` INT NOT NULL,
		`practice_id` INT NOT NULL,
		`practice_name` VARCHAR(50) NOT NULL,
		`physician_id` INT NOT NULL,
		`physician_name` VARCHAR(35) NOT NULL

	);

    DROP TEMPORARY TABLE  IF EXISTS `temp_agreement_contract_practice_physicians`;
	CREATE TEMPORARY TABLE `temp_agreement_contract_practice_physicians`
	(
		`contract_id` INT NOT NULL,
		`contract_name` VARCHAR(50) NOT NULL,
		`contract_name_id` INT NOT NULL,
		`practice_id` INT NOT NULL,
		`practice_name` VARCHAR(50) NOT NULL,
		`physician_id` INT NOT NULL,
		`physician_name` VARCHAR(35) NOT NULL,
		`contract_type_id` INT NOT NULL,
		`payment_type_id` INT NOT NULL,
		`expected_hour` float NOT NULL default 0.00,
		`min_hour` float NOT NULL default 0.00,
        `max_hour` float NOT NULL default 0.00,
		`payment_type_name` VARCHAR(35) NOT NULL,
		`contract_type_name` VARCHAR(35) NOT NULL,
		`annual_cap` float NOT NULL default 0.00,
		`annual_max_payment` float NOT NULL default 0.00,
		`prior_start_date` DATE NOT NULL,
		`prior_amount_paid` float NOT NULL default 0.00
	);

	
    DROP TEMPORARY TABLE  IF EXISTS `temp_contract_rate`;
    CREATE TEMPORARY TABLE `temp_contract_rate`(
		`contract_rate` DECIMAL(10,2),
		`range_start_day` INT NOT NULL,
        `range_end_day` INT NOT NULL
	);



    
    OPEN cur_agreements;

    REPEAT

		FETCH cur_agreements INTO agreement_id, agreement_name, agreement_hospital_id, agreement_start_date,
        agreement_end_date, agreement_valid_upto, period_type, payment_frequency_start_date;

		IF NOT no_more_agreements THEN
            
            truncate `temp_agreement_term_dates`;
			truncate `temp_agreement_contract_practice_physicians`;


		   
            IF period_type = 1 THEN 
				SELECT DAY(payment_frequency_start_date) into period_day_of_month;
				SELECT DATE_FORMAT(NOW() ,concat('%Y-%m','-',period_day_of_month)) into current_period_start_date;
				SET start_date = DATE_SUB(current_period_start_date,INTERVAL 24 MONTH); 

                SET current_period_end_date = DATE_ADD(current_period_start_date,INTERVAL 1 MONTH);
            ELSEIf period_type = 2 THEN 
				SET period_count = ROUND(DATEDIFF(NOW(), payment_frequency_start_date)/7, 0) - 1;
				SET total_days = period_count * 7;
				SELECT DATE_FORMAT(DATE_ADD(payment_frequency_start_date,INTERVAL total_days DAY),'%Y-%m-%d') into current_period_start_date;
				SET start_date = DATE_SUB(current_period_start_date,INTERVAL 104 WEEK); 

                SET current_period_end_date=DATE_ADD(current_period_start_date,INTERVAL 7 DAY);
            ELSEIf period_type = 3 THEN 
				SET period_count = ROUND(DATEDIFF(NOW(), payment_frequency_start_date)/14, 0) - 1;
				SET total_days = period_count * 14;
				SELECT DATE_FORMAT(DATE_ADD(payment_frequency_start_date,INTERVAL total_days DAY),'%Y-%m-%d') into current_period_start_date;
				SET start_date = DATE_SUB(current_period_start_date,INTERVAL 104 WEEK); 

				SET current_period_end_date = DATE_ADD(current_period_start_date,INTERVAL 14 DAY);
            ELSEIf period_type = 4 THEN 
				SELECT DAY(payment_frequency_start_date) into period_day_of_month;
				SELECT DATE_FORMAT(NOW() ,concat('%Y-%m','-',period_day_of_month)) into current_period_start_date;
				SET start_date = DATE_SUB(current_period_start_date,INTERVAL 24 MONTH); 

                SET current_period_end_date=DATE_ADD(current_period_start_date,INTERVAL 3 MONTH);
            END IF;
            SET current_period_end_date=DATE_SUB(current_period_end_date, INTERVAL 1 DAY);

            IF agreement_valid_upto = "0000-00-00" THEN
				SET agreement_valid_upto = current_period_end_date;
			ELSE
                
                IF agreement_valid_upto > current_period_end_date THEN
                        SET agreement_valid_upto = current_period_end_date;
                END IF;
			END IF;

			
            IF start_date < payment_frequency_start_date THEN
               SET start_date = payment_frequency_start_date;
            END IF;

            
            IF period_type = 1 THEN 
                SET end_date=DATE_ADD(start_date,INTERVAL 1 MONTH);
				SET term = TIMESTAMPDIFF(MONTH, start_date, current_period_start_date); 
            ELSEIf period_type = 2 THEN 
                SET end_date=DATE_ADD(start_date,INTERVAL 7 DAY);
				SET term = ROUND(DATEDIFF(NOW(), start_date)/7, 0); 
            ELSEIf period_type = 3 THEN 
                SET end_date=DATE_ADD(start_date,INTERVAL 14 DAY);
				SET term = ROUND(DATEDIFF(NOW(), start_date)/14, 0); 
            ELSEIf period_type = 4 THEN 
                SET end_date=DATE_ADD(start_date,INTERVAL 3 MONTH);
				SET term = CEIL(TIMESTAMPDIFF(MONTH, start_date, current_period_start_date) / 3); 
            END IF;

            SET end_date=DATE_SUB(end_date, INTERVAL 1 DAY);

			SET counter=TIMESTAMPDIFF(MONTH, payment_frequency_start_date, start_date);

			SET term = term + counter;

            create_contract_period_loop: LOOP
				IF counter < term THEN
					INSERT INTO  `temp_agreement_term_dates` VALUES(agreement_id, counter +1 , start_date, end_date);
                    INSERT INTO  `temp_agreement_term_dates_all` VALUES(agreement_id, counter +1 , start_date, end_date);
                    SET start_date=DATE_ADD(end_date, INTERVAL 1 DAY);

                    
                    IF period_type = 1 THEN 
                        SET end_date=DATE_ADD(start_date,INTERVAL 1 MONTH);
                    ELSEIf period_type = 2 THEN 
                        SET end_date=DATE_ADD(start_date,INTERVAL 7 DAY);
                    ELSEIf period_type = 3 THEN 
                        SET end_date=DATE_ADD(start_date,INTERVAL 14 DAY);
                    ELSEIf period_type = 4 THEN 
                        SET end_date=DATE_ADD(start_date,INTERVAL 3 MONTH);
                    END IF;

					SET end_date=DATE_SUB(end_date, INTERVAL 1 DAY);
					SET counter= counter + 1;
				ELSE
					LEAVE create_contract_period_loop;
				END IF;
			END LOOP;

			 SET @contracts_queryString = CONCAT('INSERT INTO temp_agreement_contract_practice_physicians
											SELECT c.id, cn.name, c.contract_name_id, c.practice_id, p.name as practice_name,
											c.physician_id , concat(ph.last_name,", ", ph.first_name) as physician_name,
											c.contract_type_id, c.payment_type_id, c.expected_hours, c.min_hours, c.max_hours,
                                            pt.name, ct.name, c.annual_cap, c.annual_max_payment,
											c.prior_start_date as prior_start_date, c.prior_amount_paid as prior_amount_paid
											 FROM contracts c
											 JOIN contract_names cn ON c.contract_name_id= cn.id
											 JOIN physicians ph ON ph.id = c.physician_id
											 JOIN practices p on p.id = c.practice_id
                                             JOIN payment_types pt on pt.id = c.payment_type_id
                                             JOIN contract_types ct on ct.id = c.contract_type_id
											 WHERE c.agreement_id= ', agreement_id,
											 ' AND p.hospital_id =',agreement_hospital_id,' AND c.end_date = "0000-00-00 00:00:00"
											 and IsNull(c.deleted_at) and IsNull(p.deleted_at) and c.manually_archived = 0 order by physician_id;');
			PREPARE contracts_stmt FROM @contracts_queryString;
			EXECUTE contracts_stmt;
			DEALLOCATE PREPARE contracts_stmt;

			BLOCK_TERMDATES: BEGIN
				DECLARE no_more_termdates boolean default false;
				DECLARE cur_agreement_term_dates cursor for select * from temp_agreement_term_dates;
				DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_termdates = TRUE;

				
				OPEN cur_agreement_term_dates;
				REPEAT

					FETCH cur_agreement_term_dates INTO agreement_id, period_number, start_date, end_date;
						
					IF NOT 	no_more_termdates THEN
						BLOCK_PHYSICIANS: BEGIN
							DECLARE temp_log_count int default 0;
							DECLARE calculated_amount decimal(10,2) default 0.00;
							DECLARE sum_amount_paid decimal(10,2) default 0.00;
							DECLARE contract_rate decimal(10,2) default 0.00;
							DECLARE fmv decimal(10,2) default 0.00;
							DECLARE log_hours_sum float default 0.00;
							DECLARE log_hours_sum_cumulataive float default 0.00;
							DECLARE sum_amount_paid_cumulative decimal(10,2) default 0.00;
							DECLARE is_remaining_amount boolean default false;
                            DECLARE payment_type_name VARCHAR(35) default "";
                            DECLARE contract_type_name VARCHAR(35) default "";
                            DECLARE oncall_calculated_payment DECIMAL(10,2) default 0.00;
							DECLARE is_final_payment int default 0;
							DECLARE agreement_year_start_date_mod int default 0;
							DECLARE agreement_year_start_date_diff int default 0;
							DECLARE agreement_interval varchar(30) default null;
							DECLARE contract_annual_cap FLOAT default 0.00;
							DECLARE expected_payment_to_be_paid DECIMAL(10,2) default 0.00;
							DECLARE annual_remaining DECIMAL(10,2) default 0.00;
							DECLARE annual_max_payment DECIMAL(10,2) default 0.00;
							DECLARE prior_start_date date;
							DECLARE prior_amount_paid DECIMAL(10,2) default 0.00;
							DECLARE contract_agreement_start_date DATE;
							DECLARE var_max_hours_per_week DECIMAL(10,2) default 0.00;
							DECLARE var_week_count DECIMAL(10,2) default 0.00;
							DECLARE var_admin_hours DECIMAL(10,2) default 0.00;

							DECLARE no_more_physicians_rows boolean default FALSE;

							DECLARE cur_contract_practice_physicians cursor for select * from temp_agreement_contract_practice_physicians;
							DECLARE continue handler for not found set no_more_physicians_rows = TRUE;

							OPEN cur_contract_practice_physicians;
							REPEAT
								FETCH cur_contract_practice_physicians INTO contract_id, contract_name, contract_name_id,
									practice_id, practice_name, physician_id, physician_name, contract_type_id, payment_type_id,
                                    expected_hours, min_hours, max_hours, payment_type_name, contract_type_name, contract_annual_cap, temp_annual_max_payment, prior_start_date, prior_amount_paid;


								truncate temp_logs;

								if not no_more_physicians_rows then
									
									
									SET is_final_payment=0;
									SELECT count(id) into is_final_payment FROM amount_paid
									WHERE amount_paid.physician_id = physician_id
									AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
									AND amount_paid.start_date = start_date AND amount_paid.end_date = end_date AND amount_paid.final_payment = '1';
                                    
								    IF payment_type_id <> 3 THEN

                                        SET @logs_queryString = CONCAT('INSERT INTO temp_logs
													SELECT pl.contract_id, pl.practice_id, pl.physician_id, ', period_number, ',"',start_date, '","', end_date, '", "" as action_name, sum(duration), sum(log_hours),
													  (select contract_rate.rate from contract_rate
														where contract_rate.contract_id = pl.contract_id and
														contract_rate.effective_start_date <= "', start_date,
														'" and contract_rate.status = "1"
														and case
														  when Instr(actions.name, "Weekend") > 0 then  contract_rate.rate_type = 6
														  when Instr(actions.name, "Holiday") > 0 then contract_rate.rate_type = 7
														   when Instr(actions.name, "On-Call") > 0 then contract_rate.rate_type = 2
														  when Instr(actions.name, "Called-back") > 0  then contract_rate.rate_type =3
														  when Instr(actions.name, "Called-In") > 0 then contract_rate.rate_type =4
														  when Instr(actions.name, "Weekday") > 0 then contract_rate.rate_type = 5
														  when Instr(actions.name, "On-Call/Uncompensated") > 0 then contract_rate.rate_type = 8
														  else contract_rate.rate_type IN (1, 9)
														  end  order by effective_start_date desc limit 1) as contract_rate,
													(SELECT sum(amountPaid)  FROM amount_paid WHERE amount_paid.physician_id = pl.physician_id
										 		 AND amount_paid.contract_id = pl.contract_id AND amount_paid.practice_id = pl.practice_id
										 		 AND amount_paid.start_date = "', start_date, '" AND amount_paid.end_date= "', end_date, '" limit 1) as amount_paid
													FROM physician_logs pl JOIN actions  on actions.id = pl.action_id
                                                    JOIN actions a on a.id = pl.action_id
													JOIN contracts c on c.id = pl.contract_id
													where pl.contract_id = ', contract_id,
													' and pl.practice_id = ', practice_id,
													' and pl.physician_id = ', physician_id,
													' and IF(c.payment_type_id = 9, actions.category_id, "") !=  "12"' 
													' and (pl.approval_date <> "0000-00-00" OR pl.signature <> 0)
													 and pl.date between "', start_date ,
													'" and "', end_date, '" group by pl.contract_id, pl.practice_id, pl.physician_id, action_name;');

										PREPARE logs_query_stmt FROM @logs_queryString;
										EXECUTE logs_query_stmt;
										DEALLOCATE PREPARE logs_query_stmt;

										select count(*) into temp_log_count from temp_logs;

										
										set is_remaining_amount = false;
										set calculated_amount = 0.00;

									IF temp_log_count > 0 THEN
										IF	is_final_payment = 0 THEN 

											SELECT tl.sum_log_hours_calculated, tl.contract_rate, tl.sum_amount_paid into log_hours_sum, contract_rate, sum_amount_paid from temp_logs tl
											where tl.contract_id =  contract_id
											and tl.practice_id = practice_id
											and tl.physician_id = physician_id;


											if IsNull(sum_amount_paid) then
												set sum_amount_paid = 0.00;
											end if;

											if IsNull(log_hours_sum) then
												set log_hours_sum = 0.00;
											end if;

											if IsNull(contract_rate) then
												set contract_rate = 0.00;
											end if;




											
											IF payment_type_id = 1 OR payment_type_id = 7 THEN
												IF period_number > 1 THEN

													SELECT sum(duration) into log_hours_sum_cumulataive from physician_logs where physician_logs.contract_id =  contract_id
													and physician_logs.practice_id = practice_id
													and physician_logs.physician_id = physician_id
													and (physician_logs.approval_date <> "0000-00-00" OR physician_logs.signature <> 0)
													and physician_logs.date <= end_date order by physician_logs.date ASC;

													if IsNull(log_hours_sum_cumulataive) then
														set log_hours_sum_cumulataive = 0.00;
													end if;

													SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE amount_paid.physician_id = physician_id
													AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
													AND amount_paid.start_date >= agreement_start_date AND amount_paid.end_date <= end_date limit 1;

														if IsNull(sum_amount_paid_cumulative) then
														set sum_amount_paid_cumulative = 0.00;
													end if;

													IF log_hours_sum_cumulataive > 0 THEN
														set fmv = sum_amount_paid_cumulative / log_hours_sum_cumulataive;
													ELSE
														set fmv = sum_amount_paid_cumulative;
													END IF;

													IF (fmv <= contract_rate AND log_hours_sum >= min_hours) THEN
														SET calculated_amount = contract_rate * expected_hours;
														IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
															SET is_remaining_amount = true;
														ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) then
															SET is_remaining_amount = true;
														END IF;
													END IF;


												ELSE 
                                                
													IF (min_hours <= log_hours_sum) THEN
														SET calculated_amount = contract_rate * expected_hours;
														IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
															SET is_remaining_amount = true;
														ELSE
															IF ((calculated_amount - sum_amount_paid) > 0 and start_date > deployment_date) THEN
																SET is_remaining_amount = true;
															END IF;
														END IF;
													END IF;
												END IF; 
												ELSEIF payment_type_id = 5 THEN
													
													
													SET total_log_count = log_hours_sum;
													truncate temp_contract_rate;
													SET @contract_rate_queryString = CONCAT('INSERT INTO temp_contract_rate
																	SELECT rate, range_start_day, range_end_day
																	FROM contract_rate
																	WHERE contract_id = ',contract_id,'
																	AND contract_rate.effective_start_date <= "',start_date,'"
																	AND contract_rate.effective_end_date >= "',end_date,'"
																	AND contract_rate.rate_type = "8"
																	AND contract_rate.status = "1" ORDER BY `rate_index`  ASC');

													PREPARE contract_rate_query_stmt FROM @contract_rate_queryString;

													EXECUTE contract_rate_query_stmt;
													DEALLOCATE PREPARE contract_rate_query_stmt;

													BLOCK_PAYMENT_TYPE_5: BEGIN
														DECLARE no_more_contract_rate boolean default FALSE;
														DECLARE cur_contract_rate cursor for select * from temp_contract_rate;
														DECLARE continue handler for not found set no_more_contract_rate = TRUE;

														OPEN cur_contract_rate;
														REPEAT
															FETCH cur_contract_rate INTO contract_rate, start_day, end_day;

															if not no_more_contract_rate then
																SET temp_day_count = (end_day - start_day) + 1;

																IF total_log_count > 0 THEN

                                                                    IF total_log_count < temp_day_count THEN
                                                                        SET calculated_amount = calculated_amount + total_log_count * contract_rate;
                                                                    ELSE
                                                                        SET calculated_amount = calculated_amount + temp_day_count * contract_rate;
                                                                    END IF;

                                                                    SET total_log_count = total_log_count - temp_day_count;

                                                                END IF;
															end if;
														UNTIL no_more_contract_rate END REPEAT;
														CLOSE cur_contract_rate;

														IF (sum_amount_paid = 0.00 AND calculated_amount > 0.00) THEN
															SET is_remaining_amount = true;
														ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
															SET is_remaining_amount = true;
														END IF;
														

													

													SET agreement_year_start_date_diff=TIMESTAMPDIFF(MONTH, agreement_start_date, NOW())+1;
													SET agreement_year_start_date_mod=agreement_year_start_date_diff DIV 12;
													SET agreement_interval=CONCAT('INTERVAL ',agreement_year_start_date_mod,' YEAR');
													SET @querystring =CONCAT('SELECT (DATE_ADD("',agreement_start_date,'",', agreement_interval,')) into @agreement_year_start_date');

													PREPARE stmt from @querystring;
													EXECUTE stmt;
													DEALLOCATE PREPARE stmt;

													SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE
													amount_paid.physician_id = physician_id
													AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
													AND amount_paid.start_date >= @agreement_year_start_date AND amount_paid.end_date <= NOW() limit 1;


													IF (sum_amount_paid_cumulative = temp_annual_max_payment) THEN
														SET is_remaining_amount = false;
													END IF;

													

													
													

												END BLOCK_PAYMENT_TYPE_5;
												ELSEIF payment_type_id = 6 THEN
													
													IF ( min_hours  <= log_hours_sum) THEN
														SET calculated_amount = contract_rate;
														IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
															SET is_remaining_amount = true;
														ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) then
															SET is_remaining_amount = true;
														END IF;
													END IF;
													

                                                ELSEIF payment_type_id = 2 OR payment_type_id = 8 THEN 
												
													IF(prior_start_date <> '0000-00-00') THEN
														SET contract_agreement_start_date = prior_start_date;
													Else
														SET contract_agreement_start_date = agreement_start_date;
													END IF;
													
													SET agreement_year_start_date_diff=TIMESTAMPDIFF(MONTH, contract_agreement_start_date, start_date);
													SET agreement_year_start_date_mod=agreement_year_start_date_diff DIV 12;
													SET agreement_interval=CONCAT('INTERVAL ',agreement_year_start_date_mod,' YEAR');
													SET @querystring =CONCAT('SELECT (DATE_ADD("',contract_agreement_start_date,'",', agreement_interval,')) into @agreement_year_start_date');

													PREPARE stmt from @querystring;
													EXECUTE stmt;
													DEALLOCATE PREPARE stmt;
													
													SET @agreement_year_end_date=DATE_SUB(DATE_ADD(@agreement_year_start_date, INTERVAL 1 YEAR), INTERVAL 1 DAY);
													
													IF agreement_year_start_date_mod = 0 THEN 
														SET expected_payment_to_be_paid =  (contract_annual_cap * contract_rate) - prior_amount_paid;
													ELSE 
														SET expected_payment_to_be_paid =  contract_annual_cap * contract_rate;
													END IF;

													SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE
													amount_paid.physician_id = physician_id
													AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
													AND amount_paid.start_date >= @agreement_year_start_date AND amount_paid.end_date <= @agreement_year_end_date limit 1;

													IF ISNULL(sum_amount_paid_cumulative) THEN
														SET sum_amount_paid_cumulative = 0.00;
													END IF;
													SET annual_remaining = expected_payment_to_be_paid - sum_amount_paid_cumulative;

													IF annual_remaining <= 0 THEN
														SET annual_max_payment= 0.0;
													ELSE
														SET annual_max_payment=annual_remaining;
													END IF;

                                                    IF ( log_hours_sum  <= max_hours) THEN
                                                        SET calculated_amount = contract_rate * log_hours_sum;
                                                    ELSE
                                                        SET calculated_amount = contract_rate * max_hours;
                                                    END IF;

                                                    IF(annual_max_payment <> 0) THEN
														IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
															SET is_remaining_amount = true;
														ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
															SET is_remaining_amount = true;
														END IF;
													END IF;
												ELSEIF payment_type_id = 9 THEN 
                                                
                                                    SELECT max_hours_per_week into var_max_hours_per_week FROM rehab_max_hours_per_week WHERE 
                                                    rehab_max_hours_per_week.contract_id = contract_id AND rehab_max_hours_per_week.start_date <= start_date
                                                    AND rehab_max_hours_per_week.end_date >= end_date;

                                                    SELECT week_count into var_week_count FROM rehab_days_week_calculation WHERE 
                                                    rehab_days_week_calculation.start_date >= start_date AND rehab_days_week_calculation.start_date <= end_date;

                                                    SELECT admin_hours into var_admin_hours FROM rehab_admin_hours WHERE 
                                                    rehab_admin_hours.contract_id = contract_id AND rehab_admin_hours.start_date <= start_date
                                                    AND rehab_admin_hours.end_date >= end_date;

                                                    

                                                    IF var_max_hours_per_week <> 0.00 AND log_hours_sum >= var_max_hours_per_week THEN
                                                        SET calculated_amount = (((var_max_hours_per_week) *(var_week_count)) + var_admin_hours) * (contract_rate);
                                                    ELSE
                                                        SET calculated_amount = (log_hours_sum + var_admin_hours) * (contract_rate);
                                                    END IF;

                                                    IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
														SET is_remaining_amount = true;
													ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
														SET is_remaining_amount = true;
													END IF;
                                                ELSE 


													SET calculated_amount = contract_rate * log_hours_sum;



													IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
														SET is_remaining_amount = true;
													ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) THEN
														SET is_remaining_amount = true;
													END IF;
												END IF;
											ELSE 
												SET is_remaining_amount = false;
											END IF;
											INSERT INTO temp_remaining_payemnts values(agreement_id, agreement_name, contract_id, contract_name_id,
											contract_name, payment_type_id, period_number, start_date, end_date,period_number, is_remaining_amount,
											payment_type_name, contract_type_id, contract_type_name, practice_id, practice_name, physician_id, physician_name);
										ELSEIF temp_log_count = 0 THEN

											

											IF payment_type_id = 6 THEN
												IF is_final_payment = 0 THEN 
													SELECT sum(amountPaid) into sum_amount_paid FROM amount_paid WHERE amount_paid.physician_id = physician_id
													AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
													AND amount_paid.start_date >= start_date AND amount_paid.end_date <= end_date limit 1;

													select cr.rate into contract_rate from contract_rate cr
													where cr.contract_id = contract_id and
													cr.effective_start_date <= start_date
													and cr.status = "1"
													and cr.rate_type = 9
													order by cr.effective_start_date desc limit 1;

													
													if IsNull(sum_amount_paid) then
														set sum_amount_paid = 0.00;
													end if;

													
														set log_hours_sum = 0.00;
													

													if IsNull(contract_rate) then
														set contract_rate = 0.00;
													end if;
													
													
													IF ( min_hours  <= log_hours_sum ) THEN
														SET calculated_amount = contract_rate;
														IF (sum_amount_paid = 0 AND calculated_amount > 0) THEN
															SET is_remaining_amount = true;
														ELSEIF (sum_amount_paid < calculated_amount and start_date > deployment_date) then
															SET is_remaining_amount = true;
														END IF;
													END IF;



													
												ELSE 
													SET  is_remaining_amount = false;
												END IF;
												
												INSERT INTO temp_remaining_payemnts values(agreement_id, agreement_name, contract_id, contract_name_id,
												contract_name, payment_type_id, period_number, start_date, end_date,period_number, is_remaining_amount,
												payment_type_name, contract_type_id, contract_type_name, practice_id, practice_name, physician_id, physician_name);
											END IF;
										END IF;  

									ELSE 

                                        SET @logs_queryString = CONCAT('INSERT INTO temp_logs
													SELECT pl.contract_id, pl.practice_id, pl.physician_id, ', period_number, ',"',start_date, '","', end_date, '", a.name as action_name, sum(duration), sum(log_hours),
													  (select contract_rate.rate from contract_rate
														where contract_rate.contract_id = pl.contract_id and
														contract_rate.effective_start_date <= "', start_date,
														'" and contract_rate.status = "1"
														and case
														  when Instr(actions.name, "Weekend") > 0 then  contract_rate.rate_type = 6
														  when Instr(actions.name, "Holiday") > 0 then contract_rate.rate_type = 7
														   when Instr(actions.name, "On-Call") > 0 then contract_rate.rate_type = 2
														  when Instr(actions.name, "Called-back") > 0  then contract_rate.rate_type =3
														  when Instr(actions.name, "Called-In") > 0 then contract_rate.rate_type =4
														  when Instr(actions.name, "Weekday") > 0 then contract_rate.rate_type = 5
														  else contract_rate.rate_type IN (1, 9)
														  end  order by effective_start_date desc limit 1) as contract_rate,
													(SELECT sum(amountPaid)  FROM amount_paid WHERE amount_paid.physician_id = pl.physician_id
										 		 AND amount_paid.contract_id = pl.contract_id AND amount_paid.practice_id = pl.practice_id
										 		 AND amount_paid.start_date = "', start_date, '" AND amount_paid.end_date= "', end_date, '" limit 1) as amount_paid
													FROM physician_logs pl JOIN actions  on actions.id = pl.action_id
                                                    JOIN actions a on a.id = pl.action_id
													where pl.contract_id = ', contract_id,
													' and pl.practice_id = ', practice_id,
													' and pl.physician_id = ', physician_id,
													' and (pl.approval_date <> "0000-00-00" OR pl.signature <> 0)
													 and pl.date between "', start_date ,
													'" and "', end_date, '" group by pl.contract_id, pl.practice_id, pl.physician_id, action_name;');

										PREPARE logs_query_stmt FROM @logs_queryString;
										EXECUTE logs_query_stmt;
										DEALLOCATE PREPARE logs_query_stmt;


                                        select count(*) into temp_log_count from temp_logs;

                                       

										
										set is_remaining_amount = false;
                                        set oncall_calculated_payment = 0.00;

										IF temp_log_count > 0 THEN
											IF is_final_payment = 0 THEN 

												SELECT sum(temp_logs.sum_log_hours_calculated*temp_logs.contract_rate) into oncall_calculated_payment from temp_logs
												where temp_logs.contract_id =  contract_id
												and temp_logs.practice_id = practice_id
												and temp_logs.physician_id = physician_id;

												SELECT temp_logs.sum_amount_paid into  sum_amount_paid  from temp_logs
												where temp_logs.contract_id =  contract_id
												and temp_logs.practice_id = practice_id
												and temp_logs.physician_id = physician_id LIMIT 1;

												if IsNull(oncall_calculated_payment) then
													set oncall_calculated_payment = 0.00;
												end if;
												if IsNull(sum_amount_paid) then
													set sum_amount_paid = 0.00;
												end if;

												IF (sum_amount_paid = 0 AND oncall_calculated_payment > 0) THEN
													SET is_remaining_amount = true;
												 ELSEIF (sum_amount_paid < oncall_calculated_payment and start_date > deployment_date)  THEN
													SET is_remaining_amount = true;
												ELSE
													SET is_remaining_amount = false;
												END IF;

												
												SET agreement_year_start_date_diff=TIMESTAMPDIFF(MONTH, agreement_start_date, NOW())+1;
												SET agreement_year_start_date_mod=agreement_year_start_date_diff DIV 12;
												SET agreement_interval=CONCAT('INTERVAL ',agreement_year_start_date_mod,' YEAR');
												SET @querystring =CONCAT('SELECT (DATE_ADD("',agreement_start_date,'",', agreement_interval,')) into @agreement_year_start_date');

												PREPARE stmt from @querystring;
												EXECUTE stmt;
												DEALLOCATE PREPARE stmt;

												SELECT sum(amountPaid) into sum_amount_paid_cumulative FROM amount_paid WHERE
												amount_paid.physician_id = physician_id
												AND amount_paid.contract_id = contract_id AND amount_paid.practice_id = practice_id
												AND amount_paid.start_date >= @agreement_year_start_date AND amount_paid.end_date <= NOW() limit 1;


												IF (sum_amount_paid_cumulative = temp_annual_max_payment) THEN
													SET is_remaining_amount = false;
												END IF;

											     

											ELSE 
												SET is_remaining_amount = false;
											END IF;
											
											INSERT INTO temp_remaining_payemnts values(agreement_id, agreement_name, contract_id, contract_name_id,
											contract_name, payment_type_id, period_number, start_date, end_date,period_number, is_remaining_amount,
											payment_type_name, contract_type_id, contract_type_name, practice_id, practice_name, physician_id, physician_name);
									    END IF; 
                                    END IF; 

								END IF; 

							UNTIL no_more_physicians_rows END REPEAT;
							CLOSE cur_contract_practice_physicians;
						END BLOCK_PHYSICIANS; 
					END IF; 
				UNTIL no_more_termdates END REPEAT;
				CLOSE cur_agreement_term_dates;
			END BLOCK_TERMDATES;

		END IF; 
	UNTIL no_more_agreements END REPEAT;
    CLOSE cur_agreements;

    SELECT  * FROM temp_agreement_term_dates_all;
	SELECT * FROM temp_remaining_payemnts;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50001 DROP VIEW IF EXISTS `contract invoice note is 1`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `contract invoice note is 1` AS select `invoice_notes`.`id` AS `id`,`invoice_notes`.`note_type` AS `note_type`,`invoice_notes`.`note_for` AS `note_for`,`invoice_notes`.`note_index` AS `note_index`,`invoice_notes`.`note` AS `note`,`invoice_notes`.`is_active` AS `is_active`,`invoice_notes`.`created_at` AS `created_at`,`invoice_notes`.`updated_at` AS `updated_at`,`invoice_notes`.`hospital_id` AS `hospital_id` from `invoice_notes` where ((`invoice_notes`.`note_index` = 1) and (`invoice_notes`.`note_type` = 3)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!50001 DROP VIEW IF EXISTS `contract invoice note is 2`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `contract invoice note is 2` AS select `invoice_notes`.`id` AS `id`,`invoice_notes`.`note_type` AS `note_type`,`invoice_notes`.`note_for` AS `note_for`,`invoice_notes`.`note_index` AS `note_index`,`invoice_notes`.`note` AS `note`,`invoice_notes`.`is_active` AS `is_active`,`invoice_notes`.`created_at` AS `created_at`,`invoice_notes`.`updated_at` AS `updated_at`,`invoice_notes`.`hospital_id` AS `hospital_id` from `invoice_notes` where ((`invoice_notes`.`note_index` = 2) and (`invoice_notes`.`note_type` = 3)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!50001 DROP VIEW IF EXISTS `contract invoice note is 3`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `contract invoice note is 3` AS select `invoice_notes`.`id` AS `id`,`invoice_notes`.`note_type` AS `note_type`,`invoice_notes`.`note_for` AS `note_for`,`invoice_notes`.`note_index` AS `note_index`,`invoice_notes`.`note` AS `note`,`invoice_notes`.`is_active` AS `is_active`,`invoice_notes`.`created_at` AS `created_at`,`invoice_notes`.`updated_at` AS `updated_at`,`invoice_notes`.`hospital_id` AS `hospital_id` from `invoice_notes` where ((`invoice_notes`.`note_index` = 3) and (`invoice_notes`.`note_type` = 3)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!50001 DROP VIEW IF EXISTS `contract invoice note is 4`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `contract invoice note is 4` AS select `invoice_notes`.`id` AS `id`,`invoice_notes`.`note_type` AS `note_type`,`invoice_notes`.`note_for` AS `note_for`,`invoice_notes`.`note_index` AS `note_index`,`invoice_notes`.`note` AS `note`,`invoice_notes`.`is_active` AS `is_active`,`invoice_notes`.`created_at` AS `created_at`,`invoice_notes`.`updated_at` AS `updated_at`,`invoice_notes`.`hospital_id` AS `hospital_id` from `invoice_notes` where ((`invoice_notes`.`note_index` = 4) and (`invoice_notes`.`note_type` = 3)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!50001 DROP VIEW IF EXISTS `physician invoice note is 1`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `physician invoice note is 1` AS select `invoice_notes`.`id` AS `id`,`invoice_notes`.`note_type` AS `note_type`,`invoice_notes`.`note_for` AS `note_for`,`invoice_notes`.`note_index` AS `note_index`,`invoice_notes`.`note` AS `note`,`invoice_notes`.`is_active` AS `is_active`,`invoice_notes`.`created_at` AS `created_at`,`invoice_notes`.`updated_at` AS `updated_at`,`invoice_notes`.`hospital_id` AS `hospital_id` from `invoice_notes` where ((`invoice_notes`.`note_index` = 1) and (`invoice_notes`.`note_type` = 4)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!50001 DROP VIEW IF EXISTS `physician invoice note is 2`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `physician invoice note is 2` AS select `invoice_notes`.`id` AS `id`,`invoice_notes`.`note_type` AS `note_type`,`invoice_notes`.`note_for` AS `note_for`,`invoice_notes`.`note_index` AS `note_index`,`invoice_notes`.`note` AS `note`,`invoice_notes`.`is_active` AS `is_active`,`invoice_notes`.`created_at` AS `created_at`,`invoice_notes`.`updated_at` AS `updated_at`,`invoice_notes`.`hospital_id` AS `hospital_id` from `invoice_notes` where ((`invoice_notes`.`note_index` = 2) and (`invoice_notes`.`note_type` = 4)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!50001 DROP VIEW IF EXISTS `physician invoice note is 3`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `physician invoice note is 3` AS select `invoice_notes`.`id` AS `id`,`invoice_notes`.`note_type` AS `note_type`,`invoice_notes`.`note_for` AS `note_for`,`invoice_notes`.`note_index` AS `note_index`,`invoice_notes`.`note` AS `note`,`invoice_notes`.`is_active` AS `is_active`,`invoice_notes`.`created_at` AS `created_at`,`invoice_notes`.`updated_at` AS `updated_at`,`invoice_notes`.`hospital_id` AS `hospital_id` from `invoice_notes` where ((`invoice_notes`.`note_index` = 3) and (`invoice_notes`.`note_type` = 4)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!50001 DROP VIEW IF EXISTS `physician invoice note is 4`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `physician invoice note is 4` AS select `invoice_notes`.`id` AS `id`,`invoice_notes`.`note_type` AS `note_type`,`invoice_notes`.`note_for` AS `note_for`,`invoice_notes`.`note_index` AS `note_index`,`invoice_notes`.`note` AS `note`,`invoice_notes`.`is_active` AS `is_active`,`invoice_notes`.`created_at` AS `created_at`,`invoice_notes`.`updated_at` AS `updated_at`,`invoice_notes`.`hospital_id` AS `hospital_id` from `invoice_notes` where ((`invoice_notes`.`note_index` = 4) and (`invoice_notes`.`note_type` = 4)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!50001 DROP VIEW IF EXISTS `physlog`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `physlog` AS select `physician_logs`.`physician_id` AS `physician_id`,`physician_logs`.`contract_id` AS `contract_id`,`physician_logs`.`practice_id` AS `practice_id`,(case when (`physician_logs`.`approval_date` like '0000-00-00') then '1901-01-01' else `physician_logs`.`approval_date` end) AS `AppDate` from `physician_logs` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

INSERT INTO `migrations` VALUES ('2015_08_20_232148_add_details_to_physician_logs',1);
INSERT INTO `migrations` VALUES ('2015_12_11_004854_on_call_schedule',2);
INSERT INTO `migrations` VALUES ('2015_12_17_032636_add_approval_date_to_physician_logs',2);
INSERT INTO `migrations` VALUES ('2015_11_17_053639_add_on_call_columns',3);
INSERT INTO `migrations` VALUES ('2016_01_07_041737_add_log_entered_by',4);
INSERT INTO `migrations` VALUES ('2016_01_08_094439_add_agreement_id_and_contract_id_to_on_call_schedule',4);
INSERT INTO `migrations` VALUES ('2016_01_14_093809_add_column_entered_by_user_type_to_physician_logs',4);
INSERT INTO `migrations` VALUES ('2016_01_15_052727_add_column_am_pm_flag_to_physician_logs',4);
INSERT INTO `migrations` VALUES ('2016_01_21_070200_add_approved_by_column_to_physician_logs',4);
INSERT INTO `migrations` VALUES ('2016_01_22_013623_add_timestamps_to_on_call_schedule',4);
INSERT INTO `migrations` VALUES ('2016_03_31_023416_vaild_upto',5);
INSERT INTO `migrations` VALUES ('2016_04_08_020458_add_is_deleted',6);
INSERT INTO `migrations` VALUES ('2016_04_14_225113_create_physician_practice_history_table',7);
INSERT INTO `migrations` VALUES ('2016_04_17_213342_add_end_date',7);
INSERT INTO `migrations` VALUES ('2016_05_22_231606_add_contract_id_to_amount_paid',7);
INSERT INTO `migrations` VALUES ('2016_06_24_214959_add_practice_id_to_amount_paid',7);
INSERT INTO `migrations` VALUES ('2016_06_27_032137_add_practice_startdate_to_physician_practice_history',7);
INSERT INTO `migrations` VALUES ('2016_07_08_070808_add_practice_enddate_to_physician_practice_history',7);
INSERT INTO `migrations` VALUES ('2016_07_09_074220_add_practice_id_to_physician_logs',7);
INSERT INTO `migrations` VALUES ('2017_01_17_213715_add_mandate_details_to_contracts',8);
INSERT INTO `migrations` VALUES ('2017_01_02_210318_create_user_signatures_table',9);
INSERT INTO `migrations` VALUES ('2017_02_14_004856_create_physician_device_tokens_table',10);
INSERT INTO `migrations` VALUES ('2017_02_20_013332_add_managers_and_dates_for_reminder_to_agreements',10);
INSERT INTO `migrations` VALUES ('2017_02_22_013005_create_log_approval_table',10);
INSERT INTO `migrations` VALUES ('2017_02_22_013047_create_log_approval_history_table',10);
INSERT INTO `migrations` VALUES ('2017_03_15_030812_create_rejected_log_reasons_table',10);
INSERT INTO `migrations` VALUES ('2017_04_26_215223_change_created_at_date_to_datetime',10);
INSERT INTO `migrations` VALUES ('2017_05_04_021939_add_column_approval_process_agreement',10);
INSERT INTO `migrations` VALUES ('2017_05_10_234715_add_column_last_invoice_no_hospital_invoices',10);
INSERT INTO `migrations` VALUES ('2017_09_12_020451_create_cron_schedule_table',11);
INSERT INTO `migrations` VALUES ('2018_04_05_233024_add_timeZone_physician_logs_table',12);
INSERT INTO `migrations` VALUES ('2018_03_22_034148_add_annual_cap_contrscts_table',13);
INSERT INTO `migrations` VALUES ('2018_03_29_051752_add_CM_FM_contrscts_table',13);
INSERT INTO `migrations` VALUES ('2018_04_13_024921_add_signaturetimeZone_physician_logs_table',13);
INSERT INTO `migrations` VALUES ('2018_04_13_035102_add_signaturetimeZone_logApproval_table',13);
INSERT INTO `migrations` VALUES ('2018_04_26_043934_add_on_call_called_back_to_contract_table',14);
INSERT INTO `migrations` VALUES ('2018_08_20_064211_create_agreement_approval_managers_info_table',15);
INSERT INTO `migrations` VALUES ('2018_08_20_085330_add_invoice_reminder_recipient_agreement_table',15);
INSERT INTO `migrations` VALUES ('2018_08_21_023940_create_approval_manager_type_table',15);
INSERT INTO `migrations` VALUES ('2018_08_22_040545_add_invoice_reminder_recipient_email_opt_in_status_table',15);
INSERT INTO `migrations` VALUES ('2018_08_27_020417_add_contractID_to_agreement_approval_managers_info_table',15);
INSERT INTO `migrations` VALUES ('2018_08_29_021811_add_physician_opt_in_email_to_contracts_table',15);
INSERT INTO `migrations` VALUES ('2018_08_31_021853_add_approval_managers_level_to_log_approval_table',15);
INSERT INTO `migrations` VALUES ('2018_08_31_062230_add_approval_managers_level_to_log_approval_history_table',15);
INSERT INTO `migrations` VALUES ('2018_09_25_073713_create_contract_document_table',15);
INSERT INTO `migrations` VALUES ('2018_11_28_063031_create_failed_jobs_table',15);
INSERT INTO `migrations` VALUES ('2018_12_24_021126_add_nextApprovalInfo_to_physician_logs_table',16);
INSERT INTO `migrations` VALUES ('2019_01_02_063740_add_indexs_to_amount_paid_table',16);
INSERT INTO `migrations` VALUES ('2018_11_06_021210_create_contract_deadline_days_table',17);
INSERT INTO `migrations` VALUES ('2018_11_06_030223_update_contract_deadline_option',17);
INSERT INTO `migrations` VALUES ('2018_12_20_011314_update_contracts_with_custom_action_enabled',17);
INSERT INTO `migrations` VALUES ('2018_12_25_221130_update_contracts_with_manual_end_date',17);
INSERT INTO `migrations` VALUES ('2019_03_13_085046_create_practiceManagerReport_table',18);
INSERT INTO `migrations` VALUES ('2019_05_27_022847_on_call_activities',19);
INSERT INTO `migrations` VALUES ('2019_05_27_023754_create_payment_types_table',19);
INSERT INTO `migrations` VALUES ('2019_05_28_001810_add_payment_types_table',19);
INSERT INTO `migrations` VALUES ('2019_06_03_022718_add_payment_types_to_contracts_table',19);
INSERT INTO `migrations` VALUES ('2019_07_25_034757_add_payment_types_to_contract_names_table',19);
INSERT INTO `migrations` VALUES ('2019_07_31_063610_add_burden_of_call_to_contracts_table',20);
INSERT INTO `migrations` VALUES ('2019_09_18_030751_add_softdelete_to_physicians_table',21);
INSERT INTO `migrations` VALUES ('2019_09_18_042158_add_softdelete_to_users_table',21);
INSERT INTO `migrations` VALUES ('2019_09_30_035718_add_softdelete_to_contracts_table',21);
INSERT INTO `migrations` VALUES ('2019_09_30_235339_add_softdelete_to_agreements_table',21);
INSERT INTO `migrations` VALUES ('2019_10_01_000827_add_softdelete_to_hospitals_table',21);
INSERT INTO `migrations` VALUES ('2019_10_01_065420_add_softdelete_to_practices_table',21);
INSERT INTO `migrations` VALUES ('2019_10_03_032915_add_softdelete_to_physician_logs_table',21);
INSERT INTO `migrations` VALUES ('2019_10_03_073416_add_softdelete_to_physician_reports_table',21);
INSERT INTO `migrations` VALUES ('2019_10_07_071134_add_unsuccessful_login_attempts_counter_to_users_table',21);
INSERT INTO `migrations` VALUES ('2019_10_07_075649_add_locked_to_users_table',21);
INSERT INTO `migrations` VALUES ('2019_10_08_071742_add_expiration_date_to_users_table',21);
INSERT INTO `migrations` VALUES ('2019_10_08_092530_add_password_expiration_months_to_hospitals_table',21);
INSERT INTO `migrations` VALUES ('2019_10_15_055932_add_valid_upto_to_contracts_table',21);
INSERT INTO `migrations` VALUES ('2019_10_16_022140_add_softdelete_to_agreement_approval_managers_info_table',21);
INSERT INTO `migrations` VALUES ('2019_11_04_102229_add_index_to_physician_logs_table_date',21);
INSERT INTO `migrations` VALUES ('2019_11_04_102333_add_index_to_log_approval_history_table_log_id',21);
INSERT INTO `migrations` VALUES ('2019_11_17_221617_create_invoice_notes_table',22);
INSERT INTO `migrations` VALUES ('2019_12_12_022220_add_manually_archived_to_contracts_table',23);
INSERT INTO `migrations` VALUES ('2019_12_25_013333_create_health_system_table',24);
INSERT INTO `migrations` VALUES ('2019_12_25_014115_create_regions_table',24);
INSERT INTO `migrations` VALUES ('2019_12_25_021036_create_region_hospitals_table',24);
INSERT INTO `migrations` VALUES ('2019_12_26_015403_create_health_system_users_table',24);
INSERT INTO `migrations` VALUES ('2019_12_26_020040_create_health_system_region_users_table',24);
INSERT INTO `migrations` VALUES ('2019_12_26_223530_insert_health_system_region_groups_to_groups_table',24);
INSERT INTO `migrations` VALUES ('2020_03_24_220552_create_health_system_reports_table',25);
INSERT INTO `migrations` VALUES ('2020_04_28_102333_add_index_to_log_approval_table_log_id',26);
INSERT INTO `migrations` VALUES ('2020_05_03_231738_add_is_custom_reason_to_rejected_log_reasons_table',27);
INSERT INTO `migrations` VALUES ('2020_05_13_113457_create_proxy_approver_details_table',28);
INSERT INTO `migrations` VALUES ('2020_06_11_000001_create_interface_types_table',29);
INSERT INTO `migrations` VALUES ('2020_06_11_000002_create_hospital_interface_lawson_table',29);
INSERT INTO `migrations` VALUES ('2020_06_11_000003_create_hospital_interface_imagenow_table',29);
INSERT INTO `migrations` VALUES ('2020_06_11_000004_create_physician_interface_lawson_apcinvoice_table',29);
INSERT INTO `migrations` VALUES ('2020_06_11_000005_create_contract_interface_lawson_apcdistrib_table',29);
INSERT INTO `migrations` VALUES ('2020_06_11_000006_add_is_lawson_interfaced_to_contracts_table',29);
INSERT INTO `migrations` VALUES ('2020_06_11_000007_add_is_interfaced_to_amount_paid_table',29);
INSERT INTO `migrations` VALUES ('2020_06_11_000008_create_interface_tank_lawson_table',29);
INSERT INTO `migrations` VALUES ('2020_06_11_000009_add_invoice_number_suffix_to_apcdistrib_table',29);
INSERT INTO `migrations` VALUES ('2020_06_11_000010_add_api_credentials_to_hospital_interface_lawson_table',29);
INSERT INTO `migrations` VALUES ('2020_06_11_000011_add_api_credentials_to_hospital_interface_imagenow_table',29);
INSERT INTO `migrations` VALUES ('2020_06_15_105022_add_is_invoice_dashboard_display_to_hospital_user',30);
INSERT INTO `migrations` VALUES ('2020_06_23_080051_add_enter_by_day_to_contracts_table',31);
INSERT INTO `migrations` VALUES ('2020_06_23_081552_create_contract_psa_wrvu_rates_table',31);
INSERT INTO `migrations` VALUES ('2020_06_23_091341_add_wrvu_payments_to_contracts_table',31);
INSERT INTO `migrations` VALUES ('2020_06_23_101505_create_contract_psa_metrics_table',31);
INSERT INTO `migrations` VALUES ('2020_07_15_000001_create_agreement_internal_notes_table',32);
INSERT INTO `migrations` VALUES ('2020_07_15_000002_create_contract_internal_notes_table',32);
INSERT INTO `migrations` VALUES ('2020_07_20_022649_add_prior_worked_hours_and_payments_to_contracts_table',32);
INSERT INTO `migrations` VALUES ('2020_08_31_091407_create_column_preferences_payment_status_table',33);
INSERT INTO `migrations` VALUES ('2020_08_31_122719_create_column_preferences_approval_dashboard_table',33);
INSERT INTO `migrations` VALUES ('2020_09_24_070425_add_index_to_agreement_approval_managers_info_table',33);
INSERT INTO `migrations` VALUES ('2020_09_24_070931_add_agreement_id_index_to_contracts_table',33);
INSERT INTO `migrations` VALUES ('2020_09_24_071219_add_hospital_id_index_to_agreements_table',33);
INSERT INTO `migrations` VALUES ('2020_10_22_120739_create_physician_log_history_table',34);
INSERT INTO `migrations` VALUES ('2020_11_04_015052_create_contract_rate_table',35);
INSERT INTO `migrations` VALUES ('2020_12_02_052634_add_migration_getRate_to_contract_rate_table',35);
INSERT INTO `migrations` VALUES ('2020_12_07_043326_create_physician_practices_table',36);
INSERT INTO `migrations` VALUES ('2020_12_07_045218_add_column_practiceid_contracts',36);
INSERT INTO `migrations` VALUES ('2021_01_15_161935_create_jobs_table',36);
INSERT INTO `migrations` VALUES ('2021_02_27_105939_create_action_categories_table',36);
INSERT INTO `migrations` VALUES ('2021_02_27_114241_add_catagory_id_and_hospital_id_to_actions_table',36);
INSERT INTO `migrations` VALUES ('2021_03_08_055608_create_log_unapproval_history_table',36);
INSERT INTO `migrations` VALUES ('2021_03_08_172238_add_categories_against_existing_actions_in_actions_table',36);
INSERT INTO `migrations` VALUES ('2021_03_12_124318_add_sort_order_to_actions_table',36);
INSERT INTO `migrations` VALUES ('2021_03_22_052457_on_call_process',36);
INSERT INTO `migrations` VALUES ('2021_04_21_065733_add_indexes_for_user_id_to_agreement_approval_managers_info_table',36);
INSERT INTO `migrations` VALUES ('2021_04_21_094131_add_indexes_for_practice_id_to_contracts_table',36);
INSERT INTO `migrations` VALUES ('2021_04_21_124446_add_indexes_for_practice_id_to_physician_logs_table',36);
INSERT INTO `migrations` VALUES ('2021_04_21_153037_add_indexes_to_physician_practices_table',36);
INSERT INTO `migrations` VALUES ('2021_04_21_170744_add_indexes_to_contract_rate_table',36);
INSERT INTO `migrations` VALUES ('2021_04_29_024535_convert_tables_into_inno_d_b',36);
INSERT INTO `migrations` VALUES ('2021_04_30_110412_add_invoice_type_to_hospital_table',36);
INSERT INTO `migrations` VALUES ('2021_05_04_102850_add_hospital_id_to_invoice_notes_table',36);
INSERT INTO `migrations` VALUES ('2021_05_05_120025_add_index_on_note_type_note_for_is_active_to_invoice_notes_table',36);
INSERT INTO `migrations` VALUES ('2021_05_21_052238_add_practice_id_physician_reports',37);
INSERT INTO `migrations` VALUES ('2021_06_26_003149_create_hospital_assertation_text',38);
INSERT INTO `migrations` VALUES ('2021_05_21_095010_create_otp_history_table',39);
INSERT INTO `migrations` VALUES ('2021_06_15_133706_add_holiday_on_off_to_contracts',39);
INSERT INTO `migrations` VALUES ('2021_06_17_130846_add_column_partial_hours_contracts',39);
INSERT INTO `migrations` VALUES ('2021_06_18_061743_add_column_log_hours_table_physician_logs',39);
INSERT INTO `migrations` VALUES ('2021_06_30_075438_add_final_payment_to_amount_paid',39);
INSERT INTO `migrations` VALUES ('2021_07_23_160638_add_on_call_uncompensated_rates_to_table_contract_rates',39);
INSERT INTO `migrations` VALUES ('2021_07_23_162522_add_hours_calcution_to_contracts',39);
INSERT INTO `migrations` VALUES ('2021_08_10_113912_add_payment_types_into_payment_types_table',39);
INSERT INTO `migrations` VALUES ('2021_08_24_061627_add_annual_max_payment_to_contracts',39);
INSERT INTO `migrations` VALUES ('2021_09_07_093829_create_compliance_report_table',39);
INSERT INTO `migrations` VALUES ('2021_09_08_092736_add_index_for_contract_id_to_contract_deadline_days_table',39);
INSERT INTO `migrations` VALUES ('2021_09_09_070407_create_physician_hospital_reports_table',39);
INSERT INTO `migrations` VALUES ('2021_09_09_143111_add_benchmark_to_hospitals_table',39);
INSERT INTO `migrations` VALUES ('2021_09_23_092244_modify_weekday_rate_to_contracts_table',39);
INSERT INTO `migrations` VALUES ('2021_09_23_092719_modify_weekend_rate_to_contracts_table',39);
INSERT INTO `migrations` VALUES ('2021_09_23_092944_modify_holiday_rate_to_contracts_table',39);
INSERT INTO `migrations` VALUES ('2021_09_23_093152_modify_on_call_rate_to_contracts_table',39);
INSERT INTO `migrations` VALUES ('2021_09_23_093341_modify_called_back_rate_to_contracts_table',39);
INSERT INTO `migrations` VALUES ('2021_09_23_093458_modify_called_in_rate_to_contracts_table',39);
INSERT INTO `migrations` VALUES ('2021_09_23_093926_modify__f_m_v_rate_to_contracts',39);
INSERT INTO `migrations` VALUES ('2021_09_23_094307_modify_annual_max_payment_to_contracts_table',39);
INSERT INTO `migrations` VALUES ('2021_09_23_114230_create_performance_report_table',39);
INSERT INTO `migrations` VALUES ('2021_10_04_145522_modify_rate_to_contract_rate_table',39);
INSERT INTO `migrations` VALUES ('2021_10_12_130523_create_hospital_feature_details_table',39);
INSERT INTO `migrations` VALUES ('2021_10_14_095500_create_oncalluncompesated_activity',39);
INSERT INTO `migrations` VALUES ('2021_10_27_124847_add_payment_frequency_and_start_date_column_to_agreement',40);
INSERT INTO `migrations` VALUES ('2021_12_29_052057_add_allow_max_hours_to_contracts_table',40);
INSERT INTO `migrations` VALUES ('2022_01_12_145857_create_hospitals_contract_spend_paid_table',40);
INSERT INTO `migrations` VALUES ('2022_01_31_064704_create_hospital_logs_table',41);
INSERT INTO `migrations` VALUES ('2022_01_31_083201_add_time_to_approve_and_time_to_payment_to_physician_logs_table',41);
INSERT INTO `migrations` VALUES ('2021_11_25_132058_create_split_payment_percentage_table',42);
INSERT INTO `migrations` VALUES ('2021_11_25_132304_create_amount_paid_with_percentage_table',42);
INSERT INTO `migrations` VALUES ('2021_11_30_140852_modify_payment_percentage_to_split_payment_percentage_table',42);
INSERT INTO `migrations` VALUES ('2021_12_07_104953_create_action_hospitals_table',42);
INSERT INTO `migrations` VALUES ('2021_12_07_105458_create_hospitals_override_mandate_details_table',42);
INSERT INTO `migrations` VALUES ('2021_12_07_110625_create_hospitals_time_stamp_entry_table',42);
INSERT INTO `migrations` VALUES ('2022_02_16_064930_add_is_active_to_action_hospitals',42);
INSERT INTO `migrations` VALUES ('2022_03_10_103706_create_invoice_types_table',42);
INSERT INTO `migrations` VALUES ('2022_04_06_123604_add_quaterly_max_hours_to_contracts_table',43);
INSERT INTO `migrations` VALUES ('2022_04_25_091909_add_invoice_no_created_by_updated_by_to_amount_paid_table',43);
INSERT INTO `migrations` VALUES ('2022_04_27_102430_change_data_type_amount_paid_table',43);
INSERT INTO `migrations` VALUES ('2022_04_29_075503_add_exception_to_failed_jobs_table',43);
INSERT INTO `migrations` VALUES ('2021_12_13_130740_add_title_to_users',44);
INSERT INTO `migrations` VALUES ('2021_12_22_055250_create_sorting_contract_activities_table',44);
INSERT INTO `migrations` VALUES ('2021_12_23_100821_create_sorting_contract_names_table',44);
INSERT INTO `migrations` VALUES ('2022_02_07_085627_add_invoice_dashboard_on_off_to_hospitals_table',44);
INSERT INTO `migrations` VALUES ('2022_02_07_153020_add_start_and_end_time_to_physician_logs_table',44);
INSERT INTO `migrations` VALUES ('2022_02_07_153557_add_start_and_end_time_to_physician_log_history_table',44);
INSERT INTO `migrations` VALUES ('2022_02_10_104214_create_payment_status_dashboard_table',44);
INSERT INTO `migrations` VALUES ('2022_02_17_061520_add_is_active_to_sorting_contract_activities',44);
INSERT INTO `migrations` VALUES ('2022_02_17_161241_add_is_active_to_sorting_contract_names_table',44);
INSERT INTO `migrations` VALUES ('2022_02_20_115146_add_is_active_to_hospitals_time_stamp_entry_table',44);
INSERT INTO `migrations` VALUES ('2022_02_21_113839_add_is_active_to_hospitals_override_mandate_details_table',44);
INSERT INTO `migrations` VALUES ('2022_03_01_061927_modify_start_time_end_time_to_physician_logs_table',44);
INSERT INTO `migrations` VALUES ('2022_03_01_090425_modify_start_time_end_time_to_physician_log_history_table',44);
INSERT INTO `migrations` VALUES ('2022_03_03_104606_add_remarks_to_amount_paid_table',44);
INSERT INTO `migrations` VALUES ('2022_04_19_064454_modify_duration_to_physician_logs_table',44);
INSERT INTO `migrations` VALUES ('2022_04_22_060804_modify_log_hours_to_physician_logs_table',44);
INSERT INTO `migrations` VALUES ('2022_06_14_074328_create_custom_category_actions_table',45);
INSERT INTO `migrations` VALUES ('2022_06_20_123010_add_state_monthly_to_contracts_table',45);
INSERT INTO `migrations` VALUES ('2022_06_20_123047_add_state_annually_to_contracts_table',45);
INSERT INTO `migrations` VALUES ('2022_07_06_061440_create_rehab_max_hours_per_week_table',45);
INSERT INTO `migrations` VALUES ('2022_07_06_061501_create_rehab_max_hours_per_week_history_table',45);
INSERT INTO `migrations` VALUES ('2022_07_08_055613_create_rehab_days_week_calculation_table',45);
INSERT INTO `migrations` VALUES ('2022_07_11_104529_create_rehab_admin_hours_table',45);
INSERT INTO `migrations` VALUES ('2022_07_11_104602_create_rehab_admin_hours_history_table',45);
INSERT INTO `migrations` VALUES ('2022_07_26_124802_create_attestation_types_table',45);
INSERT INTO `migrations` VALUES ('2022_07_26_130743_create_attestation_question_types_table',45);
INSERT INTO `migrations` VALUES ('2022_07_26_131042_create_attestations_table',45);
INSERT INTO `migrations` VALUES ('2022_07_26_131704_create_attestation_questions_table',45);
INSERT INTO `migrations` VALUES ('2022_07_27_064414_create_attestation_questions_answer_table',45);
INSERT INTO `migrations` VALUES ('2022_08_02_044954_add_calculated_payment_to_column_preferences_approval_dashboard_table',45);
INSERT INTO `migrations` VALUES ('2022_08_02_111450_create_attestation_questions_answer_header_table',45);
INSERT INTO `migrations` VALUES ('2022_08_04_055041_create_attestation_report_table',45);
INSERT INTO `migrations` VALUES ('2022_08_08_141746_add_approve_all_invoices_to_hospitals_table',46);
INSERT INTO `migrations` VALUES ('2022_08_24_140443_create_sso_clients_table',46);
INSERT INTO `migrations` VALUES ('2022_08_24_140818_create_sso_client_domains_table',46);
INSERT INTO `migrations` VALUES ('2022_09_28_170018_create_audits_table',46);
INSERT INTO `migrations` VALUES ('2022_10_10_102448_create_physician_types_table',46);
INSERT INTO `migrations` VALUES ('2022_10_10_121831_add_receipients_to_contracts_table',46);
INSERT INTO `migrations` VALUES ('2022_10_14_074018_add_practice_id_to_invoice_notes_table',46);
INSERT INTO `migrations` VALUES ('2022_10_28_072410_add_supervision_type_to_contracts_table',46);
